[
  {
    "text": "### Instruction:\nCreate a medium technology tracker using Streamlit\n\n### Input:\nApp category: technology, Complexity: medium, Type: tracker\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport datetime\n\nst.set_page_config(page_title=\"Tech Tracker\", page_icon=\":computer:\", layout=\"wide\")\n\n# Sample Data\ndata = {\n    'Date': [datetime.date(2024, 1, 1), datetime.date(2024, 1, 8), datetime.date(2024, 1, 15), datetime.date(2024, 1, 22),\n             datetime.date(2024, 1, 29), datetime.date(2024, 2, 5), datetime.date(2024, 2, 12), datetime.date(2024, 2, 19)],\n    'Product': ['Laptop', 'Laptop', 'Tablet', 'Smartphone', 'Laptop', 'Tablet', 'Smartphone', 'Laptop'],\n    'Units Sold': [150, 160, 120, 180, 170, 130, 190, 185],\n    'Revenue': [150000, 160000, 60000, 90000, 170000, 65000, 95000, 185000],\n    'Marketing Spend': [10000, 11000, 8000, 9000, 12000, 8500, 9500, 12500]\n}\ndf = pd.DataFrame(data)\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\nproduct_filter = st.sidebar.multiselect(\n    \"Select Product(s)\",\n    options=df['Product'].unique(),\n    default=df['Product'].unique()\n)\n\nstart_date = st.sidebar.date_input(\"Start Date\", df['Date'].min())\nend_date = st.sidebar.date_input(\"End Date\", df['Date'].max())\n\n# Apply filters\ndf_selection = df[\n    (df['Product'].isin(product_filter)) &\n    (df['Date'] >= start_date) &\n    (df['Date'] <= end_date)\n]\n\n# Main page\nst.title(\":computer: Tech Sales Tracker\")\nst.markdown(\"## Sales Performance Overview\")\n\n# KPIs\ntotal_revenue = int(df_selection[\"Revenue\"].sum())\naverage_revenue = round(df_selection[\"Revenue\"].mean(), 2)\ntotal_units_sold = int(df_selection[\"Units Sold\"].sum())\naverage_marketing_spend = round(df_selection[\"Marketing Spend\"].mean(), 2)\n\nleft_column, middle_column, right_column, last_column = st.columns(4)\nwith left_column:\n    st.subheader(\"Total Revenue:\")\n    st.subheader(f\"US $ {total_revenue:,}\")\nwith middle_column:\n    st.subheader(\"Average Revenue:\")\n    st.subheader(f\"US $ {average_revenue:,}\")\nwith right_column:\n    st.subheader(\"Total Units Sold:\")\n    st.subheader(f\"{total_units_sold:,}\")\nwith last_column:\n    st.subheader(\"Avg. Marketing Spend:\")\n    st.subheader(f\"US $ {average_marketing_spend:,}\")\n\nst.markdown(\"\"\"---\"\"\")\n\n# Charts\nsales_by_product = df_selection.groupby(by=[\"Product\"]).sum()[[\"Revenue\"]].sort_values(by=\"Revenue\")\nfig_product_sales = px.bar(\n    sales_by_product,\n    x=\"Revenue\",\n    y=sales_by_product.index,\n    orientation=\"h\",\n    title=\"<b>Sales by Product</b>\",\n    color_discrete_sequence=[\"#0083B8\"] * len(sales_by_product),\n    template=\"plotly_white\",\n)\nfig_product_sales.update_layout(\n    plot_bgcolor=\"rgba(0,0,0,0)\",\n    xaxis=(dict(showgrid=False))\n)\n\nsales_by_date = df_selection.groupby(by=[\"Date\"]).sum()[[\"Revenue\"]]\nfig_date_sales = px.line(\n    sales_by_date,\n    x=sales_by_date.index,\n    y=\"Revenue\",\n    title=\"<b>Sales Over Time</b>\",\n    template=\"plotly_white\",\n)\nfig_date_sales.update_layout(\n    xaxis=dict(showgrid=False),\n    yaxis=dict(showgrid=False),\n    plot_bgcolor=\"rgba(0,0,0,0)\",\n)\n\n# Display Charts\nleft_column, right_column = st.columns(2)\nleft_column.plotly_chart(fig_product_sales, use_container_width=True)\nright_column.plotly_chart(fig_date_sales, use_container_width=True)\n\n# Data table\nst.dataframe(df_selection)"
  },
  {
    "text": "### Instruction:\nCreate a medium food generator using Streamlit\n\n### Input:\nApp category: food, Complexity: medium, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport random\nimport altair as alt\n\n# Sample Data\nfood_categories = [\"Breakfast\", \"Lunch\", \"Dinner\", \"Snack\", \"Dessert\"]\nfood_items = {\n    \"Breakfast\": [\"Oatmeal with berries\", \"Pancakes\", \"Eggs and toast\", \"Smoothie\"],\n    \"Lunch\": [\"Sandwich\", \"Salad\", \"Soup\", \"Leftovers\"],\n    \"Dinner\": [\"Pasta\", \"Chicken and rice\", \"Pizza\", \"Steak\"],\n    \"Snack\": [\"Fruits\", \"Nuts\", \"Yogurt\", \"Crackers\"],\n    \"Dessert\": [\"Ice cream\", \"Cake\", \"Cookies\", \"Fruit salad\"]\n}\nprep_times = {\"Easy\": 15, \"Medium\": 30, \"Hard\": 60}\n\nst.title(\"Food Idea Generator\")\n\n# Sidebar for user input\nst.sidebar.header(\"Customize Your Food Idea\")\nselected_category = st.sidebar.selectbox(\"Choose a Category\", food_categories)\nselected_difficulty = st.sidebar.radio(\"Preparation Difficulty\", options=list(prep_times.keys()))\ninclude_ingredients = st.sidebar.checkbox(\"Include Ingredient List\", value=True)\nnum_suggestions = st.sidebar.slider(\"Number of Suggestions\", min_value=1, max_value=5, value=3)\n\n# Generate Food Idea\ndef generate_food_idea(category, num_suggestions):\n    return random.sample(food_items[category], min(num_suggestions, len(food_items[category])))\n\nfood_suggestions = generate_food_idea(selected_category, num_suggestions)\n\nst.header(\"Suggested Food Ideas\")\nfor i, suggestion in enumerate(food_suggestions):\n    st.subheader(f\"Suggestion #{i+1}: {suggestion}\")\n\n    # Display preparation time\n    st.write(f\"Estimated Preparation Time: {prep_times[selected_difficulty]} minutes\")\n\n    # Optionally display ingredient list (example - expand in real app)\n    if include_ingredients:\n        st.write(\"Ingredients: (Example - Replace with dynamic data)\")\n        st.write(\"- Ingredient 1\")\n        st.write(\"- Ingredient 2\")\n        st.write(\"- ...\")\n\n# Visualization (example: distribution of food items)\nall_food_items = []\nfor category in food_categories:\n    all_food_items.extend([(item, category) for item in food_items[category]])\n\ndf = pd.DataFrame(all_food_items, columns=[\"Food\", \"Category\"])\ncategory_counts = df[\"Category\"].value_counts().reset_index()\ncategory_counts.columns = [\"Category\", \"Count\"]\n\nst.header(\"Food Category Distribution\")\nchart = alt.Chart(category_counts).mark_bar().encode(\n    x=alt.X(\"Category\", sort=\"-y\"),\n    y=\"Count\",\n    tooltip=[\"Category\", \"Count\"]\n).properties(\n    title=\"Number of Food Items per Category\"\n)\nst.altair_chart(chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a medium finance planner using Streamlit\n\n### Input:\nApp category: finance, Complexity: medium, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\n\n# App title\nst.title(\"Financial Goal Planner\")\n\n# Sample Data (replace with user input or database connection)\ndata = {\n    'Goal': ['Retirement', 'Home Purchase', 'College Fund'],\n    'Current Savings': [50000, 10000, 5000],\n    'Target Amount': [1000000, 500000, 100000],\n    'Time Horizon (Years)': [20, 5, 10],\n    'Expected Return Rate (%)': [7, 5, 6]\n}\ndf = pd.DataFrame(data)\n\n# Sidebar for Assumptions\nwith st.sidebar:\n    st.header(\"Assumptions\")\n    inflation_rate = st.slider(\"Inflation Rate (%)\", 0.0, 5.0, 2.0, 0.1)\n    default_contribution = st.number_input(\"Default Monthly Contribution\", 100, 2000, 500, 100)\n\n# Display Goals Table\nst.subheader(\"Your Financial Goals\")\nst.dataframe(df)\n\n# Goal Breakdown and Visualization\nst.subheader(\"Goal Progress\")\n\nfor index, row in df.iterrows():\n    goal_name = row['Goal']\n    current_savings = row['Current Savings']\n    target_amount = row['Target Amount']\n    time_horizon = row['Time Horizon (Years)']\n    return_rate = row['Expected Return Rate (%)'] / 100\n\n    st.write(f\"**{goal_name}**\")\n\n    # Calculate future value of current savings\n    future_value_savings = current_savings * (1 + return_rate)**time_horizon\n\n    # Calculate required annual contribution (simplified, no inflation)\n    remaining_amount = target_amount - future_value_savings\n    required_annual_contribution = remaining_amount / time_horizon if time_horizon > 0 else 0\n    required_monthly_contribution = required_annual_contribution / 12\n\n    # User input for contribution\n    user_contribution = st.number_input(f\"Monthly Contribution for {goal_name}\", 0, 5000, int(required_monthly_contribution) if int(required_monthly_contribution) > 0 else default_contribution, 100, key=f\"contrib_{index}\")\n\n    # Project future value with user contribution\n    future_value_contributions = 0\n    for year in range(time_horizon):\n        future_value_contributions += user_contribution * 12 * (1 + return_rate)**(time_horizon - year)\n\n    projected_future_value = future_value_savings + future_value_contributions\n    progress = min(100, (projected_future_value / target_amount) * 100)\n\n    st.progress(progress / 100)\n    st.write(f\"Projected Progress: {progress:.2f}%\")\n    st.write(f\"Projected Future Value: ${projected_future_value:,.2f}\")\n\n    # Create a bar chart\n    chart_data = pd.DataFrame({\n        'Category': ['Current Savings', 'Contributions', 'Remaining'],\n        'Amount': [future_value_savings, future_value_contributions, max(0, target_amount - projected_future_value)]\n    })\n\n    fig = px.bar(chart_data, x='Category', y='Amount', title=f\"{goal_name} - Projected Funding\")\n    st.plotly_chart(fig, use_container_width=True)\n\n    st.write(\"---\")"
  },
  {
    "text": "### Instruction:\nCreate a medium productivity dashboard using Streamlit\n\n### Input:\nApp category: productivity, Complexity: medium, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\nst.set_page_config(\n    page_title=\"Project Dashboard\",\n    page_icon=\":bar_chart:\",\n    layout=\"wide\",\n    initial_sidebar_state=\"expanded\",\n)\n\n@st.cache_data\ndef load_data():\n    data = {\n        'Task': ['Task A', 'Task B', 'Task C', 'Task D', 'Task E', 'Task F'],\n        'Status': ['Completed', 'In Progress', 'To Do', 'Blocked', 'Completed', 'In Progress'],\n        'Priority': ['High', 'Medium', 'Low', 'High', 'Medium', 'High'],\n        'Assignee': ['Alice', 'Bob', 'Charlie', 'Alice', 'Bob', 'David'],\n        'Start Date': pd.to_datetime(['2024-01-15', '2024-02-01', '2024-02-15', '2024-03-01', '2024-03-15', '2024-04-01']),\n        'End Date': pd.to_datetime(['2024-01-30', '2024-02-28', '2024-03-15', '2024-03-15', '2024-04-15', '2024-04-30']),\n        'Estimated Effort (hours)': [40, 60, 20, 80, 40, 60],\n        'Actual Effort (hours)': [45, 55, 18, 85, 38, 62]\n    }\n    return pd.DataFrame(data)\n\ndf = load_data()\n\nst.sidebar.header(\"Filters\")\n\nstatus_filter = st.sidebar.multiselect(\n    \"Status:\",\n    options=df['Status'].unique(),\n    default=df['Status'].unique()\n)\n\npriority_filter = st.sidebar.multiselect(\n    \"Priority:\",\n    options=df['Priority'].unique(),\n    default=df['Priority'].unique()\n)\n\nassignee_filter = st.sidebar.multiselect(\n    \"Assignee:\",\n    options=df['Assignee'].unique(),\n    default=df['Assignee'].unique()\n)\n\nfiltered_df = df[\n    df['Status'].isin(status_filter) &\n    df['Priority'].isin(priority_filter) &\n    df['Assignee'].isin(assignee_filter)\n]\n\nst.title(\"Project Management Dashboard\")\n\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    st.metric(\"Total Tasks\", len(filtered_df))\n\nwith col2:\n    completed_tasks = filtered_df[filtered_df['Status'] == 'Completed']\n    st.metric(\"Completed Tasks\", len(completed_tasks))\n\nwith col3:\n    in_progress_tasks = filtered_df[filtered_df['Status'] == 'In Progress']\n    st.metric(\"In Progress Tasks\", len(in_progress_tasks))\n\nst.header(\"Task Breakdown\")\n\ncol4, col5 = st.columns(2)\n\nwith col4:\n    status_counts = filtered_df['Status'].value_counts().reset_index()\n    status_counts.columns = ['Status', 'Count']\n\n    chart_status = alt.Chart(status_counts).mark_bar().encode(\n        x=alt.X('Status', sort='-y'),\n        y='Count',\n        tooltip=['Status', 'Count']\n    ).properties(\n        title='Task Status Distribution'\n    )\n    st.altair_chart(chart_status, use_container_width=True)\n\nwith col5:\n    priority_counts = filtered_df['Priority'].value_counts().reset_index()\n    priority_counts.columns = ['Priority', 'Count']\n\n    chart_priority = alt.Chart(priority_counts).mark_bar().encode(\n        x=alt.X('Priority', sort='-y'),\n        y='Count',\n        tooltip=['Priority', 'Count']\n    ).properties(\n        title='Task Priority Distribution'\n    )\n    st.altair_chart(chart_priority, use_container_width=True)\n\nst.header(\"Effort Analysis\")\ncol6, col7 = st.columns(2)\n\nwith col6:\n    effort_data = filtered_df.groupby('Assignee')[['Estimated Effort (hours)', 'Actual Effort (hours)']].sum().reset_index()\n    effort_data = effort_data.melt(id_vars='Assignee', var_name='Effort Type', value_name='Hours')\n\n    chart_effort = alt.Chart(effort_data).mark_bar().encode(\n        x='Assignee',\n        y='Hours',\n        color='Effort Type',\n        tooltip=['Assignee', 'Effort Type', 'Hours']\n    ).properties(\n        title='Effort by Assignee'\n    )\n    st.altair_chart(chart_effort, use_container_width=True)\n\nwith col7:\n    filtered_df['Effort Variance'] = filtered_df['Actual Effort (hours)'] - filtered_df['Estimated Effort (hours)']\n    \n    chart_variance = alt.Chart(filtered_df).mark_bar().encode(\n        x=alt.X('Task', sort='-y'),\n        y='Effort Variance',\n        tooltip=['Task', 'Effort Variance']\n    ).properties(\n        title='Effort Variance by Task'\n    )\n\n    st.altair_chart(chart_variance, use_container_width=True)\n\nst.header(\"Task Details\")\nst.dataframe(filtered_df, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a complex travel tracker using Streamlit\n\n### Input:\nApp category: travel, Complexity: complex, Type: tracker\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nimport datetime\n\n# Sample Data\ndata = {\n    'Trip': ['Europe Adventure', 'Southeast Asia Backpack', 'South American Expedition'],\n    'Start Date': [datetime.date(2024, 6, 1), datetime.date(2024, 9, 15), datetime.date(2025, 1, 10)],\n    'End Date': [datetime.date(2024, 7, 15), datetime.date(2024, 11, 30), datetime.date(2025, 3, 20)],\n    'Budget': [5000, 3500, 4200],\n    'Expenses': [3800, 2900, 1500],\n    'Destinations': ['Paris, Rome, Barcelona', 'Bangkok, Hanoi, Kuala Lumpur', 'Buenos Aires, Rio, Machu Picchu'],\n    'Notes': ['Amazing food!', 'Met some great people!', 'Still planning the Peru leg.'],\n}\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.title('Travel Tracker')\n\n# Sidebar for Navigation\npage = st.sidebar.selectbox(\"Choose a page\", [\"Trip Overview\", \"Expense Tracker\", \"Planning Tools\"])\n\n# Trip Overview Page\nif page == \"Trip Overview\":\n    st.header(\"Current & Upcoming Trips\")\n    st.dataframe(df, use_container_width=True)\n\n    # Budget Visualization\n    st.subheader(\"Budget vs. Expenses\")\n    budget_data = df[['Trip', 'Budget', 'Expenses']].melt(id_vars='Trip', var_name='Category', value_name='Amount')\n    chart = alt.Chart(budget_data).mark_bar().encode(\n        x=alt.X('Trip', sort=None),\n        y='Amount',\n        color='Category',\n        tooltip=['Trip', 'Category', 'Amount']\n    ).properties(\n        title='Budget Allocation'\n    )\n    st.altair_chart(chart, use_container_width=True)\n\n# Expense Tracker Page\nelif page == \"Expense Tracker\":\n    st.header(\"Track Your Spending\")\n\n    selected_trip = st.selectbox(\"Select a Trip\", df['Trip'])\n    trip_data = df[df['Trip'] == selected_trip]\n\n    budget = trip_data['Budget'].values[0]\n    expenses = trip_data['Expenses'].values[0]\n    remaining = budget - expenses\n\n    col1, col2, col3 = st.columns(3)\n    col1.metric(\"Budget\", f\"${budget}\")\n    col2.metric(\"Expenses\", f\"${expenses}\")\n    col3.metric(\"Remaining\", f\"${remaining}\")\n\n    # Expense Input Form\n    with st.form(\"expense_form\"):\n        expense_name = st.text_input(\"Expense Name\")\n        expense_amount = st.number_input(\"Amount (USD)\", min_value=0.0)\n        expense_category = st.selectbox(\"Category\", [\"Accommodation\", \"Food\", \"Transportation\", \"Activities\", \"Other\"])\n        submitted = st.form_submit_button(\"Add Expense\")\n\n        if submitted:\n            # Basic update - in a real app, you'd update a database\n            st.success(f\"Added {expense_name} ({expense_category}) for ${expense_amount}\")\n            # In a real application, you would update the dataframe/database here\n\n# Planning Tools Page\nelif page == \"Planning Tools\":\n    st.header(\"Plan Your Next Adventure\")\n\n    st.subheader(\"Destination Ideas\")\n    destinations = [\"Kyoto, Japan\", \"Cape Town, South Africa\", \"Iceland Ring Road\", \"Patagonia, Argentina\", \"New Zealand South Island\"]\n    selected_destination = st.selectbox(\"Choose a Destination\", destinations)\n    st.write(f\"You selected: {selected_destination}\")\n\n    st.subheader(\"Trip Planning Checklist\")\n    checklist_items = [\"Book Flights\", \"Book Accommodation\", \"Plan Itinerary\", \"Purchase Travel Insurance\", \"Pack Bags\"]\n    for item in checklist_items:\n        st.checkbox(item)\n\n    st.subheader(\"Notes\")\n    notes = st.text_area(\"Trip Notes\", height=200)\n    st.write(\"You can use this section to jot down your thoughts and ideas for your trip.\")"
  },
  {
    "text": "### Instruction:\nCreate a complex productivity generator using Streamlit\n\n### Input:\nApp category: productivity, Complexity: complex, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime\n\nst.set_page_config(page_title=\"Project Timeline Generator\", layout=\"wide\")\n\n# Sample Data\nsample_tasks = [\n    {\"task\": \"Project Initialization\", \"start\": \"2024-01-01\", \"end\": \"2024-01-15\", \"owner\": \"Alice\", \"status\": \"Complete\"},\n    {\"task\": \"Requirements Gathering\", \"start\": \"2024-01-10\", \"end\": \"2024-01-31\", \"owner\": \"Bob\", \"status\": \"Complete\"},\n    {\"task\": \"System Design\", \"start\": \"2024-02-01\", \"end\": \"2024-02-28\", \"owner\": \"Alice\", \"status\": \"Complete\"},\n    {\"task\": \"Development\", \"start\": \"2024-03-01\", \"end\": \"2024-04-30\", \"owner\": \"Charlie\", \"status\": \"In Progress\"},\n    {\"task\": \"Testing\", \"start\": \"2024-04-15\", \"end\": \"2024-05-15\", \"owner\": \"Bob\", \"status\": \"Planned\"},\n    {\"task\": \"Deployment\", \"start\": \"2024-05-01\", \"end\": \"2024-05-31\", \"owner\": \"Alice\", \"status\": \"Planned\"},\n    {\"task\": \"User Training\", \"start\": \"2024-06-01\", \"end\": \"2024-06-15\", \"owner\": \"Charlie\", \"status\": \"Planned\"}\n]\n\n# Initialize session state for tasks if it doesn't exist\nif 'tasks' not in st.session_state:\n    st.session_state['tasks'] = sample_tasks\n\n# Sidebar for adding tasks\nwith st.sidebar:\n    st.header(\"Add New Task\")\n    new_task = st.text_input(\"Task Name\")\n    new_start = st.date_input(\"Start Date\", value=datetime.now())\n    new_end = st.date_input(\"End Date\", value=datetime.now())\n    new_owner = st.selectbox(\"Owner\", [\"Alice\", \"Bob\", \"Charlie\", \"David\"])\n    new_status = st.selectbox(\"Status\", [\"Planned\", \"In Progress\", \"Complete\", \"Blocked\"])\n\n    if st.button(\"Add Task\"):\n        st.session_state['tasks'].append({\n            \"task\": new_task,\n            \"start\": new_start.strftime(\"%Y-%m-%d\"),\n            \"end\": new_end.strftime(\"%Y-%m-%d\"),\n            \"owner\": new_owner,\n            \"status\": new_status\n        })\n        st.rerun()\n\n# Main content\nst.title(\"Project Timeline Generator\")\n\n# Convert tasks to DataFrame\ndf = pd.DataFrame(st.session_state['tasks'])\ndf['start'] = pd.to_datetime(df['start'])\ndf['end'] = pd.to_datetime(df['end'])\n\n# Filters\ncol1, col2 = st.columns(2)\nwith col1:\n    owner_filter = st.multiselect(\"Filter by Owner\", options=df['owner'].unique(), default=df['owner'].unique())\nwith col2:\n    status_filter = st.multiselect(\"Filter by Status\", options=df['status'].unique(), default=df['status'].unique())\n\nfiltered_df = df[(df['owner'].isin(owner_filter)) & (df['status'].isin(status_filter))]\n\n# Gantt Chart\nif not filtered_df.empty:\n    chart = alt.Chart(filtered_df).mark_bar().encode(\n        y=alt.Y('task', sort='-x'),\n        x='start',\n        x2='end',\n        color='owner',\n        tooltip=['task', 'start', 'end', 'owner', 'status']\n    ).properties(\n        title='Project Timeline'\n    )\n    st.altair_chart(chart, use_container_width=True)\nelse:\n    st.warning(\"No tasks match the current filters.\")\n\n# Data Table\nst.subheader(\"Task Data\")\nst.dataframe(filtered_df, use_container_width=True)\n\n# Export to CSV\n@st.cache_data\ndef convert_df(df):\n    return df.to_csv().encode('utf-8')\n\ncsv = convert_df(filtered_df)\n\nst.download_button(\n    \"Download CSV\",\n    csv,\n    \"project_timeline.csv\",\n    \"text/csv\",\n    key='download-csv'\n)"
  },
  {
    "text": "### Instruction:\nCreate a complex food planner using Streamlit\n\n### Input:\nApp category: food, Complexity: complex, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nfrom datetime import datetime, timedelta\nimport random\n\n# Sample Data\nfood_categories = ['Protein', 'Vegetables', 'Grains', 'Fruits', 'Dairy']\nsample_foods = {\n    'Protein': ['Chicken Breast', 'Salmon', 'Tofu', 'Lentils', 'Eggs'],\n    'Vegetables': ['Broccoli', 'Spinach', 'Carrots', 'Bell Peppers', 'Tomatoes'],\n    'Grains': ['Brown Rice', 'Quinoa', 'Oats', 'Whole Wheat Bread', 'Pasta'],\n    'Fruits': ['Apples', 'Bananas', 'Berries', 'Oranges', 'Grapes'],\n    'Dairy': ['Milk', 'Yogurt', 'Cheese', 'Cottage Cheese']\n}\n\nmeals = ['Breakfast', 'Lunch', 'Dinner', 'Snack']\n\n# Streamlit App\nst.title(\"Weekly Meal Planner\")\n\n# Date Range Selection\ntoday = datetime.today()\nstart_date = st.date_input(\"Start Date\", today)\nnum_days = st.slider(\"Number of Days\", 1, 7, 7)\nend_date = start_date + timedelta(days=num_days -1)\n\nst.write(f\"Planning meals from {start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')}\")\n\n# Initialize meal plan DataFrame\ndates = [start_date + timedelta(days=i) for i in range(num_days)]\nmeal_plan = pd.DataFrame(index=dates, columns=pd.MultiIndex.from_product([meals, food_categories]))\n\n# Populate meal plan with default \"Empty\" values\nfor date in dates:\n    for meal in meals:\n        for category in food_categories:\n            meal_plan.loc[date, (meal, category)] = \"Empty\"\n\n# Load existing meal plan if available (placeholder for future implementation)\n# Example: try: meal_plan = pd.read_csv(\"meal_plan.csv\", header=[0, 1], index_col=0); meal_plan.index = pd.to_datetime(meal_plan.index) except: pass\n\n# Meal Plan Input\nst.header(\"Meal Plan\")\n\nfor date in dates:\n    st.subheader(date.strftime('%Y-%m-%d'))\n    for meal in meals:\n        st.write(f\"**{meal}**\")\n        cols = st.columns(len(food_categories))\n        for i, category in enumerate(food_categories):\n            with cols[i]:\n                food_choice = st.selectbox(f\"{category}\", options=['Empty'] + sample_foods[category], key=f\"{date}-{meal}-{category}\")\n                meal_plan.loc[date, (meal, category)] = food_choice\n\n# Display Meal Plan\nst.header(\"Weekly Meal Plan Summary\")\nst.dataframe(meal_plan.style.highlight_null(null_color='red'))\n\n# Data Visualization (Example: Distribution of Food Categories)\nst.header(\"Food Category Distribution\")\n\nfood_counts = {}\nfor category in food_categories:\n    food_counts[category] = 0\n    for date in dates:\n        for meal in meals:\n            food_item = meal_plan.loc[date, (meal, category)]\n            if food_item != \"Empty\":\n                food_counts[category] += 1\n\nfood_counts_df = pd.DataFrame.from_dict(food_counts, orient='index', columns=['Count'])\nfood_counts_df['Category'] = food_counts_df.index\n\nchart = alt.Chart(food_counts_df).mark_bar().encode(\n    x=alt.X('Category:N', sort='-y'),\n    y='Count:Q',\n    tooltip=['Category', 'Count']\n).properties(\n    title='Food Category Distribution'\n)\nst.altair_chart(chart, use_container_width=True)\n\n# Save Button (Placeholder)\nif st.button(\"Save Meal Plan\"):\n    st.write(\"Saving meal plan... (Implementation needed)\")\n    # Example: meal_plan.to_csv(\"meal_plan.csv\")"
  },
  {
    "text": "### Instruction:\nCreate a complex travel planner using Streamlit\n\n### Input:\nApp category: travel, Complexity: complex, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nimport datetime\n\nst.set_page_config(page_title=\"Travel Planner\", page_icon=\":airplane:\", layout=\"wide\")\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    data = {\n        'Destination': ['Paris', 'Rome', 'Tokyo', 'New York', 'London', 'Sydney'],\n        'Country': ['France', 'Italy', 'Japan', 'USA', 'UK', 'Australia'],\n        'Continent': ['Europe', 'Europe', 'Asia', 'North America', 'Europe', 'Oceania'],\n        'Avg_Cost_Per_Day': [200, 180, 250, 300, 220, 280],\n        'Rating': [4.5, 4.2, 4.8, 4.0, 4.3, 4.6],\n        'Popularity': [90, 85, 95, 80, 88, 92],\n        'Image_URL': [\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4b/La_Tour_Eiffel_vue_de_Trocad%C3%A9ro.jpg/800px-La_Tour_Eiffel_vue_de_Trocad%C3%A9ro.jpg\",\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5d/Colosseum-inside%2Boutside.jpg/800px-Colosseum-inside%2Boutside.jpg\",\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Skyline_of_Shinjuku_20090129.jpg/800px-Skyline_of_Shinjuku_20090129.jpg\",\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/View_of_Downtown_Manhattan_from_a_high-rise_building_in_Brooklyn_on_October_8%2C_2022.jpg/800px-View_of_Downtown_Manhattan_from_a_high-rise_building_in_Brooklyn_on_October_8%2C_2022.jpg\",\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/Big_Ben_Clock_Tower_-_Oct_2019.jpg/800px-Big_Ben_Clock_Tower_-_Oct_2019.jpg\",\n            \"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Sydney_Opera_House_and_Harbour_Bridge_as_seen_from_Milson%27s_Point%2C_Sydney%2C_Australia.jpg/800px-Sydney_Opera_House_and_Harbour_Bridge_as_seen_from_Milson%27s_Point%2C_Sydney%2C_Australia.jpg\"\n        ]\n    }\n    df = pd.DataFrame(data)\n    return df\n\ndf = load_data()\n\n# Sidebar for user inputs\nst.sidebar.header(\"Travel Preferences\")\n\nbudget = st.sidebar.slider(\"Budget per day (USD)\", 50, 500, 200)\nduration = st.sidebar.slider(\"Trip duration (days)\", 1, 30, 7)\ncontinent_filter = st.sidebar.multiselect(\"Select Continents\", df['Continent'].unique(), default=df['Continent'].unique())\nrating_threshold = st.sidebar.slider(\"Minimum Rating\", 1.0, 5.0, 4.0)\n\n# Filtering data based on user inputs\nfiltered_df = df[df['Avg_Cost_Per_Day'] <= budget]\nfiltered_df = filtered_df[filtered_df['Continent'].isin(continent_filter)]\nfiltered_df = filtered_df[filtered_df['Rating'] >= rating_threshold]\n\n# Main content\nst.title(\"\ud83c\udf0d Personalized Travel Planner\")\n\n# Destination List\nst.header(\"Possible Destinations\")\nif filtered_df.empty:\n    st.warning(\"No destinations match your criteria. Please adjust your preferences.\")\nelse:\n    cols = st.columns(2)\n    num_cols = len(filtered_df.index)\n\n    for i in range(num_cols):\n        with cols[i % 2]:\n            st.image(filtered_df['Image_URL'].iloc[i], width=300)\n            st.subheader(filtered_df['Destination'].iloc[i])\n            st.write(f\"Country: {filtered_df['Country'].iloc[i]}\")\n            st.write(f\"Avg. Cost per Day: ${filtered_df['Avg_Cost_Per_Day'].iloc[i]}\")\n            st.write(f\"Rating: {filtered_df['Rating'].iloc[i]}/5\")\n            st.write(f\"Popularity: {filtered_df['Popularity'].iloc[i]}%\")\n            st.write(f\"Estimated Total Cost: ${filtered_df['Avg_Cost_Per_Day'].iloc[i] * duration}\")\n            if st.button(f\"Plan trip to {filtered_df['Destination'].iloc[i]}\", key=f\"plan_{i}\"):\n                st.success(f\"Trip to {filtered_df['Destination'].iloc[i]} added to your plan!\")\n\n# Visualization\nst.header(\"Cost vs. Rating\")\nchart = alt.Chart(filtered_df).mark_circle(size=100).encode(\n    x='Avg_Cost_Per_Day',\n    y='Rating',\n    tooltip=['Destination', 'Country', 'Avg_Cost_Per_Day', 'Rating']\n).properties(\n    title='Destination Cost vs. Rating'\n)\nst.altair_chart(chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a simple fitness monitor using Streamlit\n\n### Input:\nApp category: fitness, Complexity: simple, Type: monitor\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport datetime\n\n# Sample Data\ndates = pd.date_range(datetime.date.today() - datetime.timedelta(days=30), datetime.date.today())\nweights = 75 + np.random.randn(31).cumsum()\nsteps = np.random.randint(5000, 12000, size=31)\nsleep_hours = np.random.uniform(6, 8, size=31)\n\ndf = pd.DataFrame({'Date': dates, 'Weight (kg)': weights, 'Steps': steps, 'Sleep (hours)': sleep_hours})\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# Streamlit App\nst.title('Fitness Monitor')\n\n# Weight Chart\nweight_chart = alt.Chart(df).mark_line(color='red').encode(\n    x=alt.X('Date:T', title='Date'),\n    y=alt.Y('Weight (kg):Q', title='Weight (kg)')\n).properties(\n    title='Weight Trend'\n)\nst.altair_chart(weight_chart, use_container_width=True)\n\n# Steps Chart\nsteps_chart = alt.Chart(df).mark_bar(color='blue').encode(\n    x=alt.X('Date:T', title='Date'),\n    y=alt.Y('Steps:Q', title='Steps')\n).properties(\n    title='Daily Steps'\n)\nst.altair_chart(steps_chart, use_container_width=True)\n\n# Sleep Chart\nsleep_chart = alt.Chart(df).mark_line(color='green').encode(\n    x=alt.X('Date:T', title='Date'),\n    y=alt.Y('Sleep (hours):Q', title='Sleep (hours)')\n).properties(\n    title='Sleep Duration'\n)\nst.altair_chart(sleep_chart, use_container_width=True)\n\n# Metrics\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Current Weight\", f\"{df['Weight (kg)'].iloc[-1]:.1f} kg\", f\"{df['Weight (kg)'].iloc[-1] - df['Weight (kg)'].iloc[-2]:.1f} kg\")\ncol2.metric(\"Today's Steps\", df['Steps'].iloc[-1], f\"{df['Steps'].iloc[-1] - df['Steps'].iloc[-2]} steps\")\ncol3.metric(\"Sleep Last Night\", f\"{df['Sleep (hours)'].iloc[-1]:.1f} hours\")\n\nst.dataframe(df.tail(7))"
  },
  {
    "text": "### Instruction:\nCreate a medium education manager using Streamlit\n\n### Input:\nApp category: education, Complexity: medium, Type: manager\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nimport numpy as np\n\n# Sample Data\ndata = {\n    'Student ID': range(1, 16),\n    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Alice', 'Bob', 'Charlie', 'David', 'Eve', 'Alice', 'Bob', 'Charlie', 'David', 'Eve'],\n    'Course': ['Math', 'Math', 'Math', 'Math', 'Math', 'Science', 'Science', 'Science', 'Science', 'Science', 'History', 'History', 'History', 'History', 'History'],\n    'Grade': np.random.randint(60, 101, 15),\n    'Attendance': np.random.randint(75, 101, 15)\n}\n\ndf = pd.DataFrame(data)\n\nst.title('Student Performance Manager')\n\n# Sidebar\nst.sidebar.header('Filters')\nselected_course = st.sidebar.selectbox('Select Course', ['All'] + list(df['Course'].unique()))\nselected_student = st.sidebar.selectbox('Select Student', ['All'] + list(df['Name'].unique()))\n\n# Apply Filters\nfiltered_df = df.copy()\nif selected_course != 'All':\n    filtered_df = filtered_df[filtered_df['Course'] == selected_course]\n\nif selected_student != 'All':\n    filtered_df = filtered_df[filtered_df['Name'] == selected_student]\n\n# Metrics\nst.header('Overview')\ncol1, col2, col3 = st.columns(3)\n\navg_grade = filtered_df['Grade'].mean()\navg_attendance = filtered_df['Attendance'].mean()\nnum_students = filtered_df['Student ID'].nunique()\n\nwith col1:\n    st.metric(\"Average Grade\", f\"{avg_grade:.2f}\")\n\nwith col2:\n    st.metric(\"Average Attendance\", f\"{avg_attendance:.2f}%\")\n\nwith col3:\n    st.metric(\"Number of Students\", num_students)\n\n# Charts\nst.header('Visualizations')\n\n# Grade Distribution\nst.subheader('Grade Distribution')\ngrade_chart = alt.Chart(filtered_df).mark_bar().encode(\n    alt.X('Grade:Q', bin=alt.Bin(maxbins=20)),\n    y='count()',\n    tooltip=['Grade', 'count()']\n).properties(\n    title='Grade Distribution'\n)\nst.altair_chart(grade_chart, use_container_width=True)\n\n# Attendance vs Grade\nst.subheader('Attendance vs. Grade')\nscatter_chart = alt.Chart(filtered_df).mark_circle(size=60).encode(\n    x='Attendance:Q',\n    y='Grade:Q',\n    color='Course:N',\n    tooltip=['Name', 'Course', 'Grade', 'Attendance']\n).properties(\n    title='Attendance vs. Grade'\n)\n\nst.altair_chart(scatter_chart, use_container_width=True)\n\n# Data Table\nst.header('Data Table')\nst.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a medium finance monitor using Streamlit\n\n### Input:\nApp category: finance, Complexity: medium, Type: monitor\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport datetime\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    dates = pd.date_range(start=datetime.date(2023, 1, 1), end=datetime.date(2023, 12, 31), freq='D')\n    data = {\n        'Date': dates,\n        'AAPL': np.random.normal(150, 10, len(dates)),\n        'GOOG': np.random.normal(2500, 50, len(dates)),\n        'MSFT': np.random.normal(300, 15, len(dates)),\n        'TSLA': np.random.normal(200, 20, len(dates)),\n        'AMZN': np.random.normal(120, 5, len(dates))\n    }\n    df = pd.DataFrame(data)\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    return df\n\ndf = load_data()\n\n# Streamlit App\nst.title(\"Stock Price Monitor\")\n\n# Sidebar for selection\nst.sidebar.header(\"Filters\")\nselected_stocks = st.sidebar.multiselect(\"Select Stocks\", df.columns, default=['AAPL', 'MSFT'])\nstart_date = st.sidebar.date_input(\"Start Date\", value=df.index.min())\nend_date = st.sidebar.date_input(\"End Date\", value=df.index.max())\n\n# Filter Data\nfiltered_df = df[selected_stocks][start_date:end_date]\n\n# Display Metrics\nst.header(\"Key Metrics\")\ncol1, col2, col3 = st.columns(3)\n\nif not filtered_df.empty:\n\n    with col1:\n        st.metric(label=f\"{selected_stocks[0]} (Last)\", value=round(filtered_df[selected_stocks[0]].iloc[-1], 2))\n    with col2:\n        st.metric(label=f\"{selected_stocks[1] if len(selected_stocks) > 1 else selected_stocks[0]} (Last)\", value=round(filtered_df[selected_stocks[1] if len(selected_stocks) > 1 else selected_stocks[0]].iloc[-1], 2))\n    with col3:\n        if len(selected_stocks) > 2:\n            st.metric(label=f\"{selected_stocks[2]} (Last)\", value=round(filtered_df[selected_stocks[2]].iloc[-1], 2))\n        else:\n            st.write(\"\")  # Keep the column visually aligned\n\n    # Line Chart\n    st.header(\"Stock Price Trends\")\n    fig = px.line(filtered_df, x=filtered_df.index, y=selected_stocks, title=\"Stock Prices Over Time\")\n    st.plotly_chart(fig, use_container_width=True)\n\n    # Data Table\n    st.header(\"Data Table\")\n    st.dataframe(filtered_df.describe())\n\nelse:\n    st.warning(\"No data available for the selected stocks and date range.\")"
  },
  {
    "text": "### Instruction:\nCreate a simple finance calculator using Streamlit\n\n### Input:\nApp category: finance, Complexity: simple, Type: calculator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\n\nst.title('Investment Calculator')\n\n# Sample Data (Replace with user input if needed)\ninitial_investment = st.number_input('Initial Investment', value=10000, step=1000)\nannual_contribution = st.number_input('Annual Contribution', value=1000, step=500)\nyears = st.slider('Number of Years', min_value=1, max_value=30, value=10)\nannual_return_rate = st.slider('Annual Return Rate (%)', min_value=0.0, max_value=20.0, value=8.0, step=0.5) / 100\n\n# Calculation\ndata = []\nbalance = initial_investment\nfor year in range(years):\n    interest = balance * annual_return_rate\n    balance += annual_contribution + interest\n    data.append({'Year': year + 1, 'Balance': balance})\n\ndf = pd.DataFrame(data)\n\n# Display Results\nst.subheader('Investment Growth')\nst.dataframe(df)\n\n# Chart\nfig = px.line(df, x='Year', y='Balance', title='Investment Growth Over Time')\nst.plotly_chart(fig, use_container_width=True)\n\n# Summary\nfinal_balance = df['Balance'].iloc[-1]\ntotal_contributions = initial_investment + annual_contribution * years\ntotal_interest_earned = final_balance - total_contributions\n\nst.subheader('Summary')\nst.write(f'Final Balance: ${final_balance:,.2f}')\nst.write(f'Total Contributions: ${total_contributions:,.2f}')\nst.write(f'Total Interest Earned: ${total_interest_earned:,.2f}')"
  },
  {
    "text": "### Instruction:\nCreate a medium travel dashboard using Streamlit\n\n### Input:\nApp category: travel, Complexity: medium, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\n# Sample Data\ndata = {\n    'Destination': ['Paris', 'Rome', 'Tokyo', 'New York', 'London', 'Sydney', 'Cairo', 'Rio de Janeiro'],\n    'Continent': ['Europe', 'Europe', 'Asia', 'North America', 'Europe', 'Australia', 'Africa', 'South America'],\n    'Avg_Temperature_C': [12, 20, 15, 14, 11, 18, 25, 27],\n    'Avg_Cost_USD_per_day': [250, 200, 300, 350, 280, 220, 150, 180],\n    'Popularity_Score': [9.5, 9.2, 8.8, 9.0, 8.9, 8.5, 7.8, 8.0],\n    'Num_Reviews': [10000, 9500, 8000, 8500, 9000, 7500, 6000, 6500],\n    'Airport_Code': ['CDG', 'FCO', 'HND', 'JFK', 'LHR', 'SYD', 'CAI', 'GIG']\n}\n\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.title(\"Travel Destination Dashboard\")\n\n# Sidebar Filters\nst.sidebar.header(\"Filters\")\ncontinent_filter = st.sidebar.multiselect(\"Select Continent(s)\", options=df['Continent'].unique(), default=df['Continent'].unique())\ntemp_range = st.sidebar.slider(\"Temperature Range (\u00b0C)\", min_value=int(df['Avg_Temperature_C'].min()), max_value=int(df['Avg_Temperature_C'].max()), value=(int(df['Avg_Temperature_C'].min()), int(df['Avg_Temperature_C'].max())))\ncost_range = st.sidebar.slider(\"Cost Range (USD/day)\", min_value=int(df['Avg_Cost_USD_per_day'].min()), max_value=int(df['Avg_Cost_USD_per_day'].max()), value=(int(df['Avg_Cost_USD_per_day'].min()), int(df['Avg_Cost_USD_per_day'].max())))\n\n# Apply Filters\nfiltered_df = df[df['Continent'].isin(continent_filter)]\nfiltered_df = filtered_df[(filtered_df['Avg_Temperature_C'] >= temp_range[0]) & (filtered_df['Avg_Temperature_C'] <= temp_range[1])]\nfiltered_df = filtered_df[(filtered_df['Avg_Cost_USD_per_day'] >= cost_range[0]) & (filtered_df['Avg_Cost_USD_per_day'] <= cost_range[1])]\n\n# Metrics\nst.header(\"Key Metrics\")\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Destinations Available\", len(filtered_df))\ncol2.metric(\"Avg. Popularity Score\", f\"{filtered_df['Popularity_Score'].mean():.2f}\")\ncol3.metric(\"Total Reviews\", filtered_df['Num_Reviews'].sum())\n\n# Charts\nst.header(\"Visualizations\")\n\n# Scatter Plot: Cost vs. Popularity\nst.subheader(\"Cost vs. Popularity\")\nscatter_chart = alt.Chart(filtered_df).mark_circle(size=100).encode(\n    x='Avg_Cost_USD_per_day',\n    y='Popularity_Score',\n    color='Continent',\n    tooltip=['Destination', 'Avg_Cost_USD_per_day', 'Popularity_Score', 'Continent']\n).interactive()\nst.altair_chart(scatter_chart, use_container_width=True)\n\n# Bar Chart: Average Temperature by Destination\nst.subheader(\"Average Temperature by Destination\")\nbar_chart = alt.Chart(filtered_df).mark_bar().encode(\n    x=alt.X('Destination', sort='-y'),\n    y='Avg_Temperature_C',\n    tooltip=['Destination', 'Avg_Temperature_C']\n).properties(\n    width='container'\n)\nst.altair_chart(bar_chart, use_container_width=True)\n\n# Data Table\nst.header(\"Destination Details\")\nst.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a complex travel analyzer using Streamlit\n\n### Input:\nApp category: travel, Complexity: complex, Type: analyzer\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport datetime\nimport numpy as np\n\nst.set_page_config(layout=\"wide\")\n\n# Sample Data (Realistic Travel Data)\ndata = {\n    'Destination': ['Paris', 'London', 'Rome', 'New York', 'Tokyo', 'Sydney', 'Barcelona', 'Berlin', 'Amsterdam', 'Dubai', 'Paris', 'London', 'Rome', 'New York', 'Tokyo'],\n    'Continent': ['Europe', 'Europe', 'Europe', 'North America', 'Asia', 'Australia', 'Europe', 'Europe', 'Europe', 'Asia', 'Europe', 'Europe', 'Europe', 'North America', 'Asia'],\n    'Country': ['France', 'United Kingdom', 'Italy', 'USA', 'Japan', 'Australia', 'Spain', 'Germany', 'Netherlands', 'UAE', 'France', 'United Kingdom', 'Italy', 'USA', 'Japan'],\n    'Rating': [4.5, 4.2, 4.8, 4.0, 4.6, 4.3, 4.7, 4.1, 4.4, 4.9, 4.5, 4.2, 4.8, 4.0, 4.6],\n    'Price': [1200, 1000, 1100, 1500, 1800, 1600, 1300, 900, 1050, 2000, 1200, 1000, 1100, 1500, 1800],\n    'Duration': [7, 5, 6, 8, 10, 9, 7, 4, 5, 12, 7, 5, 6, 8, 10],\n    'Season': ['Spring', 'Autumn', 'Summer', 'Winter', 'Spring', 'Summer', 'Autumn', 'Spring', 'Summer', 'Winter', 'Spring', 'Autumn', 'Summer', 'Winter', 'Spring'],\n    'Traveler_Type': ['Couple', 'Solo', 'Family', 'Business', 'Couple', 'Solo', 'Family', 'Business', 'Couple', 'Solo', 'Couple', 'Solo', 'Family', 'Business', 'Couple'],\n    'Date': pd.to_datetime(['2023-03-15', '2023-09-20', '2023-07-01', '2023-12-25', '2023-04-10', '2023-08-05', '2023-10-12', '2023-05-18', '2023-06-22', '2024-01-15', '2023-03-15', '2023-09-20', '2023-07-01', '2023-12-25', '2023-04-10']),\n    'Accommodation': ['Hotel', 'Airbnb', 'Hotel', 'Hotel', 'Airbnb', 'Hotel', 'Airbnb', 'Hotel', 'Airbnb', 'Hotel', 'Hotel', 'Airbnb', 'Hotel', 'Hotel', 'Airbnb']\n}\n\ndf = pd.DataFrame(data)\n\n# Sidebar Filters\nst.sidebar.header(\"Filters\")\n\ncontinent_filter = st.sidebar.multiselect(\"Continent\", options=df['Continent'].unique(), default=df['Continent'].unique())\ncountry_filter = st.sidebar.multiselect(\"Country\", options=df['Country'].unique(), default=df['Country'].unique())\nseason_filter = st.sidebar.multiselect(\"Season\", options=df['Season'].unique(), default=df['Season'].unique())\ntraveler_type_filter = st.sidebar.multiselect(\"Traveler Type\", options=df['Traveler_Type'].unique(), default=df['Traveler_Type'].unique())\nmin_price, max_price = st.sidebar.slider(\"Price Range\", min_value=int(df['Price'].min()), max_value=int(df['Price'].max()), value=(int(df['Price'].min()), int(df['Price'].max())))\ndate_range = st.sidebar.date_input(\"Date Range\", value=(df['Date'].min().date(), df['Date'].max().date()))\n\n# Apply Filters\nfiltered_df = df[\n    (df['Continent'].isin(continent_filter)) &\n    (df['Country'].isin(country_filter)) &\n    (df['Season'].isin(season_filter)) &\n    (df['Traveler_Type'].isin(traveler_type_filter)) &\n    (df['Price'] >= min_price) &\n    (df['Price'] <= max_price) &\n    (df['Date'].dt.date >= date_range[0]) &\n    (df['Date'].dt.date <= date_range[1])\n]\n\n# Main Section\nst.title(\"Travel Destination Analyzer\")\n\n# KPIs\ncol1, col2, col3 = st.columns(3)\nwith col1:\n    st.metric(\"Number of Destinations\", filtered_df['Destination'].nunique())\nwith col2:\n    st.metric(\"Average Rating\", f\"{filtered_df['Rating'].mean():.2f}\")\nwith col3:\n    st.metric(\"Average Price\", f\"${filtered_df['Price'].mean():.2f}\")\n\n# Charts and Visualizations\n\n# Bar Chart: Rating by Destination\nst.subheader(\"Rating by Destination\")\nrating_by_destination = filtered_df.groupby('Destination')['Rating'].mean().sort_values(ascending=False).reset_index()\nfig_rating = px.bar(rating_by_destination, x='Destination', y='Rating', color='Destination',\n                  title=\"Average Rating per Destination\", color_discrete_sequence=px.colors.qualitative.Prism)\nst.plotly_chart(fig_rating, use_container_width=True)\n\n# Scatter Plot: Price vs. Duration\nst.subheader(\"Price vs. Duration\")\nfig_price_duration = px.scatter(filtered_df, x='Duration', y='Price', color='Destination',\n                                 title=\"Price vs. Duration of Trip\", hover_data=['Destination', 'Rating'],\n                                 color_discrete_sequence=px.colors.qualitative.Prism)\nst.plotly_chart(fig_price_duration, use_container_width=True)\n\n# Line Chart: Trends over Time\nst.subheader(\"Travel Trends Over Time\")\ntrends_over_time = filtered_df.groupby(pd.Grouper(key='Date', freq='M'))['Destination'].count().reset_index()\nfig_trends = px.line(trends_over_time, x='Date', y='Destination', title=\"Number of Trips Over Time\",\n                     labels={'Destination': 'Number of Trips'})\nst.plotly_chart(fig_trends, use_container_width=True)\n\n# Data Table\nst.subheader(\"Filtered Data\")\nst.dataframe(filtered_df)\n\n# Insights\nst.subheader(\"Key Insights\")\nst.write(\"Based on the selected filters:\")\nif filtered_df.empty:\n    st.write(\"No data available based on the selected filters. Please adjust your selections.\")\nelse:\n    top_destination = filtered_df['Destination'].value_counts().idxmax()\n    avg_price = filtered_df['Price'].mean()\n    st.write(f\"- The most popular destination is: **{top_destination}**.\")\n    st.write(f\"- The average price for trips within the selected criteria is: **${avg_price:.2f}**.\")"
  },
  {
    "text": "### Instruction:\nCreate a medium travel monitor using Streamlit\n\n### Input:\nApp category: travel, Complexity: medium, Type: monitor\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\n\nst.set_page_config(layout=\"wide\")\n\n# Sample Data\ndata = {\n    'City': ['New York', 'London', 'Paris', 'Tokyo', 'Sydney', 'Rome', 'Dubai', 'Rio de Janeiro', 'Cairo', 'Toronto'],\n    'Flights Booked': np.random.randint(500, 2000, size=10),\n    'Hotel Bookings': np.random.randint(200, 1000, size=10),\n    'Average Hotel Price': np.random.randint(100, 500, size=10),\n    'Average Flight Price': np.random.randint(300, 1200, size=10),\n    'Popularity Score': np.random.rand(10) * 100,\n    'Month': ['Jan', 'Jan', 'Feb', 'Feb', 'Mar', 'Mar', 'Apr', 'Apr', 'May', 'May']\n}\n\ndf = pd.DataFrame(data)\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\nselected_month = st.sidebar.selectbox(\"Select Month\", options=df['Month'].unique())\nfiltered_df = df[df['Month'] == selected_month]\n\nst.title(\"Travel Destination Monitor\")\n\n# KPIs\ncol1, col2, col3 = st.columns(3)\nwith col1:\n    total_flights = filtered_df['Flights Booked'].sum()\n    st.metric(\"Total Flights Booked\", value=total_flights)\nwith col2:\n    total_hotel_bookings = filtered_df['Hotel Bookings'].sum()\n    st.metric(\"Total Hotel Bookings\", value=total_hotel_bookings)\nwith col3:\n    avg_popularity = filtered_df['Popularity Score'].mean()\n    st.metric(\"Average Popularity Score\", value=f\"{avg_popularity:.2f}\")\n\n# Charts\ncol4, col5 = st.columns(2)\nwith col4:\n    st.subheader(\"Flights Booked by City\")\n    fig_flights = px.bar(filtered_df, x='City', y='Flights Booked', color='City', title='Flights Booked')\n    st.plotly_chart(fig_flights, use_container_width=True)\n\nwith col5:\n    st.subheader(\"Hotel Bookings by City\")\n    fig_hotels = px.bar(filtered_df, x='City', y='Hotel Bookings', color='City', title='Hotel Bookings')\n    st.plotly_chart(fig_hotels, use_container_width=True)\n\ncol6, col7 = st.columns(2)\n\nwith col6:\n    st.subheader(\"Average Hotel Price by City\")\n    fig_hotel_price = px.line(filtered_df, x='City', y='Average Hotel Price', title='Average Hotel Price')\n    st.plotly_chart(fig_hotel_price, use_container_width=True)\n\nwith col7:\n    st.subheader(\"Average Flight Price by City\")\n    fig_flight_price = px.line(filtered_df, x='City', y='Average Flight Price', title='Average Flight Price')\n    st.plotly_chart(fig_flight_price, use_container_width=True)\n\n# Data Table\nst.subheader(\"Data Table\")\nst.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a medium healthcare manager using Streamlit\n\n### Input:\nApp category: healthcare, Complexity: medium, Type: manager\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\n# Sample Data\ndata = {\n    'Patient ID': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    'Name': ['Alice Smith', 'Bob Johnson', 'Charlie Brown', 'Diana Miller', 'Eve Davis', 'Frank Wilson', 'Grace Taylor', 'Harry Moore', 'Ivy White', 'Jack Black'],\n    'Age': [35, 48, 29, 62, 41, 55, 31, 70, 24, 38],\n    'Gender': ['Female', 'Male', 'Male', 'Female', 'Female', 'Male', 'Female', 'Male', 'Female', 'Male'],\n    'Diagnosis': ['Hypertension', 'Diabetes', 'Healthy', 'Arthritis', 'Asthma', 'Hypertension', 'Healthy', 'Diabetes', 'Healthy', 'Arthritis'],\n    'Date of Visit': pd.to_datetime(['2024-01-15', '2024-01-22', '2024-01-29', '2024-02-05', '2024-02-12', '2024-02-19', '2024-02-26', '2024-03-04', '2024-03-11', '2024-03-18']),\n    'Medication': ['Lisinopril', 'Metformin', 'None', 'Ibuprofen', 'Albuterol', 'Amlodipine', 'None', 'Insulin', 'None', 'Naproxen'],\n    'Dosage': ['10mg', '500mg', 'N/A', '200mg', '90mcg', '5mg', 'N/A', '10 units', 'N/A', '250mg'],\n    'Visit Cost': [75, 120, 50, 90, 80, 75, 50, 150, 50, 90]\n}\n\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.title('Healthcare Manager Dashboard')\n\n# Sidebar Filters\nst.sidebar.header('Filters')\ngender_filter = st.sidebar.multiselect('Select Gender', options=df['Gender'].unique(), default=df['Gender'].unique())\ndiagnosis_filter = st.sidebar.multiselect('Select Diagnosis', options=df['Diagnosis'].unique(), default=df['Diagnosis'].unique())\nage_slider = st.sidebar.slider('Select Age Range', min_value=int(df['Age'].min()), max_value=int(df['Age'].max()), value=(int(df['Age'].min()), int(df['Age'].max())))\n\n# Apply Filters\nfiltered_df = df[df['Gender'].isin(gender_filter) & df['Diagnosis'].isin(diagnosis_filter) & ((df['Age'] >= age_slider[0]) & (df['Age'] <= age_slider[1]))]\n\n# Display Filtered Data\nst.header('Patient Data')\nst.dataframe(filtered_df)\n\n# Metrics\ntotal_patients = len(filtered_df)\naverage_age = filtered_df['Age'].mean()\ntotal_visit_cost = filtered_df['Visit Cost'].sum()\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total Patients\", total_patients)\ncol2.metric(\"Average Age\", f\"{average_age:.1f}\")\ncol3.metric(\"Total Visit Cost\", f\"${total_visit_cost}\")\n\n# Charts\nst.header('Data Visualization')\n\n# Age Distribution\nage_chart = alt.Chart(filtered_df).mark_bar().encode(\n    alt.X('Age:Q', bin=alt.Bin(maxbins=20)),\n    y='count()',\n    tooltip=['Age', 'count()']\n).properties(\n    title='Age Distribution'\n)\nst.altair_chart(age_chart, use_container_width=True)\n\n# Diagnosis Distribution\ndiagnosis_chart = alt.Chart(filtered_df).mark_bar().encode(\n    x=alt.X('Diagnosis:N', sort='-y'),\n    y='count()',\n    tooltip=['Diagnosis', 'count()']\n).properties(\n    title='Diagnosis Distribution'\n)\nst.altair_chart(diagnosis_chart, use_container_width=True)\n\n# Cost vs Age Scatter Plot\ncost_age_chart = alt.Chart(filtered_df).mark_circle(size=60).encode(\n    x='Age',\n    y='Visit Cost',\n    color='Diagnosis',\n    tooltip=['Name', 'Age', 'Diagnosis', 'Visit Cost']\n).properties(\n    title='Visit Cost vs Age'\n)\nst.altair_chart(cost_age_chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a medium travel monitor using Streamlit\n\n### Input:\nApp category: travel, Complexity: medium, Type: monitor\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport datetime\n\nst.set_page_config(page_title=\"Travel Monitor\", page_icon=\"\u2708\ufe0f\", layout=\"wide\")\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    data = {\n        'Date': pd.to_datetime(pd.date_range(start='2024-01-01', end=datetime.date.today(), freq='D')),\n        'Flights Booked': np.random.randint(50, 200, size=len(pd.date_range(start='2024-01-01', end=datetime.date.today(), freq='D'))),\n        'Hotel Bookings': np.random.randint(30, 150, size=len(pd.date_range(start='2024-01-01', end=datetime.date.today(), freq='D'))),\n        'Average Flight Price': np.random.randint(200, 800, size=len(pd.date_range(start='2024-01-01', end=datetime.date.today(), freq='D'))),\n        'Average Hotel Price': np.random.randint(80, 300, size=len(pd.date_range(start='2024-01-01', end=datetime.date.today(), freq='D'))),\n        'Destination': np.random.choice(['Paris', 'London', 'Rome', 'New York', 'Tokyo'], size=len(pd.date_range(start='2024-01-01', end=datetime.date.today(), freq='D')))\n    }\n    df = pd.DataFrame(data)\n    return df\n\ndf = load_data()\n\n# Sidebar Filters\nst.sidebar.header(\"Filters\")\ndestination_filter = st.sidebar.multiselect(\"Select Destination(s)\", options=df['Destination'].unique(), default=df['Destination'].unique())\ndate_range = st.sidebar.date_input(\"Select Date Range\", value=[df['Date'].min(), df['Date'].max()])\n\n# Filter Data\nif len(date_range) == 2:\n    start_date, end_date = date_range\n    df = df[(df['Date'] >= pd.to_datetime(start_date)) & (df['Date'] <= pd.to_datetime(end_date))]\n\ndf = df[df['Destination'].isin(destination_filter)]\n\n\n# Main Content\nst.title(\"Travel Booking Monitor\")\n\n# Metrics\ncol1, col2, col3, col4 = st.columns(4)\ncol1.metric(\"Total Flights Booked\", df['Flights Booked'].sum())\ncol2.metric(\"Total Hotel Bookings\", df['Hotel Bookings'].sum())\ncol3.metric(\"Average Flight Price\", f\"${df['Average Flight Price'].mean():.2f}\")\ncol4.metric(\"Average Hotel Price\", f\"${df['Average Hotel Price'].mean():.2f}\")\n\n\n# Charts\nst.header(\"Trends\")\n\n# Flights Booked Line Chart\nfig_flights = px.line(df, x='Date', y='Flights Booked', title='Flights Booked Over Time', color='Destination')\nst.plotly_chart(fig_flights, use_container_width=True)\n\n# Hotel Bookings Line Chart\nfig_hotels = px.line(df, x='Date', y='Hotel Bookings', title='Hotel Bookings Over Time', color='Destination')\nst.plotly_chart(fig_hotels, use_container_width=True)\n\n\n# Price Trends\nst.header(\"Price Analysis\")\n\nprice_data = df.groupby('Destination')[['Average Flight Price', 'Average Hotel Price']].mean().reset_index()\n\n# Bar Chart for Average Prices\nfig_price = px.bar(price_data, x='Destination', y=['Average Flight Price', 'Average Hotel Price'], barmode='group', title='Average Prices by Destination')\nst.plotly_chart(fig_price, use_container_width=True)\n\n# Data Table\nst.header(\"Raw Data\")\nst.dataframe(df)"
  },
  {
    "text": "### Instruction:\nCreate a complex technology analyzer using Streamlit\n\n### Input:\nApp category: technology, Complexity: complex, Type: analyzer\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom datetime import datetime, timedelta\n\nst.set_page_config(layout=\"wide\", page_title=\"Tech Stock Analyzer\")\n\n@st.cache_data\ndef load_data():\n    # Generate some realistic-looking stock data\n    np.random.seed(42)\n    dates = pd.date_range(start=datetime.today() - timedelta(days=365), end=datetime.today())\n    tickers = ['AAPL', 'MSFT', 'GOOG', 'AMZN', 'TSLA']\n    data = {}\n    for ticker in tickers:\n        prices = 100 + np.cumsum(np.random.normal(0, 2, len(dates)))\n        volume = np.random.randint(100000, 1000000, len(dates))\n        data[ticker] = pd.DataFrame({'Date': dates, 'Close': prices, 'Volume': volume}).set_index('Date')\n    return data\n\ndata = load_data()\n\nst.sidebar.header(\"Filters\")\nselected_tickers = st.sidebar.multiselect(\"Select Tickers\", options=list(data.keys()), default=['AAPL', 'MSFT'])\nstart_date = st.sidebar.date_input(\"Start Date\", value=datetime.today() - timedelta(days=180))\nend_date = st.sidebar.date_input(\"End Date\", value=datetime.today())\n\nif not selected_tickers:\n    st.warning(\"Please select at least one ticker.\")\n    st.stop()\n\nfiltered_data = {}\nfor ticker in selected_tickers:\n    filtered_data[ticker] = data[ticker].loc[start_date:end_date]\n\nst.title(\"Tech Stock Analyzer\")\n\n# Main Area: Tab for Overview and Detailed Analysis\ntab1, tab2 = st.tabs([\"Overview\", \"Detailed Analysis\"])\n\nwith tab1:\n    st.header(\"Stock Price Overview\")\n    \n    # Plotting stock prices\n    fig_price = go.Figure()\n    for ticker in selected_tickers:\n        fig_price.add_trace(go.Scatter(x=filtered_data[ticker].index, y=filtered_data[ticker]['Close'], mode='lines', name=ticker))\n    \n    fig_price.update_layout(title=\"Stock Prices Over Time\", xaxis_title=\"Date\", yaxis_title=\"Price (USD)\")\n    st.plotly_chart(fig_price, use_container_width=True)\n\n    # Plotting volume\n    fig_volume = go.Figure()\n    for ticker in selected_tickers:\n        fig_volume.add_trace(go.Bar(x=filtered_data[ticker].index, y=filtered_data[ticker]['Volume'], name=ticker))\n    \n    fig_volume.update_layout(title=\"Trading Volume Over Time\", xaxis_title=\"Date\", yaxis_title=\"Volume\")\n    st.plotly_chart(fig_volume, use_container_width=True)\n\nwith tab2:\n    st.header(\"Detailed Stock Analysis\")\n    \n    selected_ticker_detail = st.selectbox(\"Select Ticker for Detailed Analysis\", options=selected_tickers)\n    \n    df = filtered_data[selected_ticker_detail].copy()\n    df['Daily Return'] = df['Close'].pct_change()\n    df = df.dropna()\n\n    # Candlestick chart\n    fig_candle = go.Figure(data=[go.Candlestick(x=df.index,\n                open=df['Close'].shift(1),\n                high=df['Close'].rolling(window=5).max(), #Smoothed high\n                low=df['Close'].rolling(window=5).min(), #Smoothed low\n                close=df['Close'])])\n    fig_candle.update_layout(title=f\"{selected_ticker_detail} Candlestick Chart\", xaxis_title=\"Date\", yaxis_title=\"Price (USD)\")\n    st.plotly_chart(fig_candle, use_container_width=True)\n\n    # Histogram of daily returns\n    fig_returns = px.histogram(df, x='Daily Return', nbins=50, title=f\"{selected_ticker_detail} Daily Return Distribution\")\n    st.plotly_chart(fig_returns, use_container_width=True)\n\n    # Display summary statistics\n    st.subheader(\"Summary Statistics\")\n    stats = df['Daily Return'].describe()\n    st.dataframe(stats)"
  },
  {
    "text": "### Instruction:\nCreate a complex fitness manager using Streamlit\n\n### Input:\nApp category: fitness, Complexity: complex, Type: manager\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\n# Sample Data\ndata = {\n    'Date': pd.to_datetime([datetime.now() - timedelta(days=i) for i in range(30)]),\n    'Exercise': np.random.choice(['Running', 'Weightlifting', 'Yoga', 'Swimming'], 30),\n    'Duration (min)': np.random.randint(30, 90, 30),\n    'Calories Burned': np.random.randint(200, 800, 30),\n    'Weight (kg)': np.random.uniform(70, 75, 30).round(1)\n}\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Fitness Manager\")\n\n# Sidebar\nwith st.sidebar:\n    st.header(\"Filters\")\n    exercise_filter = st.multiselect(\"Exercise Type\", options=df['Exercise'].unique(), default=df['Exercise'].unique())\n    date_range = st.date_input(\"Date Range\", [df['Date'].min().date(), df['Date'].max().date()])\n\n# Data Filtering\ndf_filtered = df[df['Exercise'].isin(exercise_filter)]\ndf_filtered = df_filtered[(df_filtered['Date'].dt.date >= date_range[0]) & (df_filtered['Date'].dt.date <= date_range[1])]\n\n# Metrics\ncol1, col2, col3 = st.columns(3)\nwith col1:\n    total_duration = df_filtered['Duration (min)'].sum()\n    st.metric(\"Total Workout Duration (min)\", total_duration)\nwith col2:\n    total_calories = df_filtered['Calories Burned'].sum()\n    st.metric(\"Total Calories Burned\", total_calories)\nwith col3:\n    avg_weight = df_filtered['Weight (kg)'].mean().round(1)\n    st.metric(\"Average Weight (kg)\", avg_weight)\n\n# Charts\nc = alt.Chart(df_filtered).mark_line().encode(\n    x='Date:T',\n    y='Calories Burned:Q',\n    tooltip=['Date', 'Exercise', 'Calories Burned']\n).properties(\n    title='Calories Burned Over Time'\n)\nst.altair_chart(c, use_container_width=True)\n\nc2 = alt.Chart(df_filtered).mark_bar().encode(\n    x='Exercise:N',\n    y='sum(Duration (min)):Q',\n    tooltip=['Exercise', 'sum(Duration (min))']\n).properties(\n    title='Duration by Exercise Type'\n)\nst.altair_chart(c2, use_container_width=True)\n\n# Data Table\nst.header(\"Workout Log\")\nst.dataframe(df_filtered)\n\n# Data Entry Form\nst.header(\"Add New Workout\")\nwith st.form(\"new_workout\"):\n    exercise_type = st.selectbox(\"Exercise\", options=['Running', 'Weightlifting', 'Yoga', 'Swimming'])\n    duration = st.number_input(\"Duration (min)\", min_value=1, max_value=240, value=60)\n    calories = st.number_input(\"Calories Burned\", min_value=50, max_value=1500, value=400)\n    weight = st.number_input(\"Weight (kg)\", min_value=50.0, max_value=150.0, value=70.0, step=0.1)\n    submitted = st.form_submit_button(\"Add Workout\")\n    if submitted:\n        new_data = pd.DataFrame({\n            'Date': [datetime.now()],\n            'Exercise': [exercise_type],\n            'Duration (min)': [duration],\n            'Calories Burned': [calories],\n            'Weight (kg)': [weight]\n        })\n        df = pd.concat([df, new_data], ignore_index=True)\n        st.success(\"Workout added!\")"
  },
  {
    "text": "### Instruction:\nCreate a simple healthcare dashboard using Streamlit\n\n### Input:\nApp category: healthcare, Complexity: simple, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\nst.title(\"Patient Health Dashboard\")\n\n# Sample Data\nnp.random.seed(42)\ndata = {\n    'Patient ID': range(1, 21),\n    'Age': np.random.randint(20, 80, 20),\n    'Blood Pressure': np.random.randint(110, 180, 20),\n    'Cholesterol': np.random.randint(150, 300, 20),\n    'BMI': np.random.uniform(18.5, 35, 20).round(1),\n    'Diabetes': np.random.choice(['Yes', 'No'], 20, p=[0.3, 0.7])\n}\n\ndf = pd.DataFrame(data)\n\n# Display DataFrame\nst.header(\"Patient Data\")\nst.dataframe(df)\n\n# Age Distribution Histogram\nst.header(\"Age Distribution\")\nage_hist = alt.Chart(df).mark_bar().encode(\n    alt.X(\"Age:Q\", bin=alt.Bin(maxbins=10)),\n    y='count()',\n    tooltip=['Age', 'count()']\n).properties(\n    title='Distribution of Patient Ages'\n)\nst.altair_chart(age_hist, use_container_width=True)\n\n# Blood Pressure vs. Cholesterol Scatter Plot\nst.header(\"Blood Pressure vs. Cholesterol\")\nscatter_plot = alt.Chart(df).mark_circle(size=60).encode(\n    x='Blood Pressure:Q',\n    y='Cholesterol:Q',\n    color='Diabetes:N',\n    tooltip=['Patient ID', 'Blood Pressure', 'Cholesterol', 'Diabetes']\n).properties(\n    title='Blood Pressure vs. Cholesterol Levels'\n)\nst.altair_chart(scatter_plot, use_container_width=True)\n\n# BMI Summary Statistics\nst.header(\"BMI Summary\")\nbmi_stats = df['BMI'].describe()\nst.write(bmi_stats)\n\n# Diabetes Count\nst.header(\"Diabetes Cases\")\ndiabetes_count = df['Diabetes'].value_counts()\nst.bar_chart(diabetes_count)"
  },
  {
    "text": "### Instruction:\nCreate a medium productivity analyzer using Streamlit\n\n### Input:\nApp category: productivity, Complexity: medium, Type: analyzer\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nimport numpy as np\n\nst.title(\"Sales Data Analyzer\")\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    dates = pd.date_range(start=\"2023-01-01\", end=\"2023-12-31\", freq=\"D\")\n    products = [\"Product A\", \"Product B\", \"Product C\"]\n    regions = [\"North\", \"South\", \"East\", \"West\"]\n    data = []\n    for date in dates:\n        for product in products:\n            for region in regions:\n                sales = int(np.random.normal(100, 30))\n                sales = max(0, sales)  # Ensure sales are not negative\n                data.append([date, product, region, sales])\n    df = pd.DataFrame(data, columns=[\"Date\", \"Product\", \"Region\", \"Sales\"])\n    return df\n\ndf = load_data()\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\nproduct_filter = st.sidebar.multiselect(\"Select Products\", options=df[\"Product\"].unique(), default=df[\"Product\"].unique())\nregion_filter = st.sidebar.multiselect(\"Select Regions\", options=df[\"Region\"].unique(), default=df[\"Region\"].unique())\ndate_range = st.sidebar.date_input(\"Select Date Range\", value=[df[\"Date\"].min(), df[\"Date\"].max()])\n\n# Apply filters\ndf_filtered = df[df[\"Product\"].isin(product_filter) & df[\"Region\"].isin(region_filter)]\ndf_filtered = df_filtered[(df_filtered[\"Date\"] >= pd.to_datetime(date_range[0])) & (df_filtered[\"Date\"] <= pd.to_datetime(date_range[1]))]\n\n# Data Summary\nst.header(\"Data Summary\")\nst.write(f\"Showing data from {date_range[0]} to {date_range[1]} for products: {', '.join(product_filter)} and regions: {', '.join(region_filter)}\")\nst.write(f\"Number of records: {len(df_filtered)}\")\nst.dataframe(df_filtered.head())\n\n# Sales Trend Chart\nst.header(\"Sales Trend\")\ndaily_sales = df_filtered.groupby(\"Date\")[\"Sales\"].sum().reset_index()\nchart = alt.Chart(daily_sales).mark_line().encode(\n    x=alt.X(\"Date:T\", axis=alt.Axis(title=\"Date\")),\n    y=alt.Y(\"Sales:Q\", axis=alt.Axis(title=\"Sales\")),\n    tooltip=[\"Date\", \"Sales\"]\n).properties(\n    title=\"Daily Sales Trend\"\n)\nst.altair_chart(chart, use_container_width=True)\n\n# Regional Sales Bar Chart\nst.header(\"Regional Sales\")\nregional_sales = df_filtered.groupby(\"Region\")[\"Sales\"].sum().reset_index()\nbar_chart = alt.Chart(regional_sales).mark_bar().encode(\n    x=alt.X(\"Region:N\", sort=\"-y\", axis=alt.Axis(title=\"Region\")),\n    y=alt.Y(\"Sales:Q\", axis=alt.Axis(title=\"Sales\")),\n    tooltip=[\"Region\", \"Sales\"]\n).properties(\n    title=\"Sales by Region\"\n)\nst.altair_chart(bar_chart, use_container_width=True)\n\n# Product Sales Pie Chart\nst.header(\"Product Sales Distribution\")\nproduct_sales = df_filtered.groupby(\"Product\")[\"Sales\"].sum().reset_index()\npie_chart = alt.Chart(product_sales).mark_arc().encode(\n    theta=alt.Theta(\"Sales:Q\", stack=True),\n    color=alt.Color(\"Product:N\"),\n    tooltip=[\"Product\", \"Sales\"]\n).properties(\n    title=\"Sales by Product\"\n)\nst.altair_chart(pie_chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a complex fitness planner using Streamlit\n\n### Input:\nApp category: fitness, Complexity: complex, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\nst.set_page_config(layout=\"wide\")\n\n# Sample Data\ndata = {\n    'Day': [datetime(2024, 1, 1) + timedelta(days=i) for i in range(30)],\n    'Workout': ['Running', 'Strength Training', 'Yoga', 'Rest'] * 8,\n    'Duration (min)': np.random.randint(30, 90, size=30),\n    'Calories Burned': np.random.randint(200, 800, size=30),\n    'Notes': ['Felt great!', 'A bit tired', 'Good stretch', 'Needed the rest'] * 8\n}\ndf = pd.DataFrame(data)\n\n# Sidebar\nst.sidebar.header(\"Fitness Planner Options\")\nselected_workout = st.sidebar.selectbox(\"Select Workout\", df['Workout'].unique())\ndate_range = st.sidebar.date_input(\"Select Date Range\", [df['Day'].min().date(), df['Day'].max().date()])\n\nstart_date = pd.to_datetime(date_range[0])\nend_date = pd.to_datetime(date_range[1])\n\nfiltered_df = df[(df['Workout'] == selected_workout) & (df['Day'] >= start_date) & (df['Day'] <= end_date)]\n\n# Main App\nst.title(\"My Fitness Planner\")\n\n# KPIs\nst.header(\"Key Performance Indicators\")\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    total_duration = filtered_df['Duration (min)'].sum()\n    st.metric(\"Total Duration (min)\", total_duration)\n\nwith col2:\n    total_calories = filtered_df['Calories Burned'].sum()\n    st.metric(\"Total Calories Burned\", total_calories)\n\nwith col3:\n    avg_duration = filtered_df['Duration (min)'].mean() if not filtered_df.empty else 0\n    st.metric(\"Average Duration (min)\", f\"{avg_duration:.2f}\")\n\n# Charts\nst.header(\"Workout Analysis\")\n\n# Duration Chart\nduration_chart = alt.Chart(filtered_df).mark_bar().encode(\n    x=alt.X('Day:T', axis=alt.Axis(title='Date')),\n    y=alt.Y('Duration (min):Q', axis=alt.Axis(title='Duration (min)')),\n    tooltip=['Day:T', 'Duration (min):Q']\n).properties(\n    title=f'Duration of {selected_workout} Over Time'\n)\nst.altair_chart(duration_chart, use_container_width=True)\n\n# Calories Chart\ncalories_chart = alt.Chart(filtered_df).mark_line().encode(\n    x=alt.X('Day:T', axis=alt.Axis(title='Date')),\n    y=alt.Y('Calories Burned:Q', axis=alt.Axis(title='Calories Burned')),\n    tooltip=['Day:T', 'Calories Burned:Q']\n).properties(\n    title=f'Calories Burned During {selected_workout}'\n)\nst.altair_chart(calories_chart, use_container_width=True)\n\n# Data Table\nst.header(\"Workout Data\")\nst.dataframe(filtered_df)\n\n# Add New Entry\nst.header(\"Add New Workout Entry\")\nwith st.form(\"new_workout\"):\n    new_date = st.date_input(\"Date\")\n    new_workout = st.selectbox(\"Workout Type\", df['Workout'].unique())\n    new_duration = st.number_input(\"Duration (min)\", min_value=1, max_value=200, value=60)\n    new_calories = st.number_input(\"Calories Burned\", min_value=50, max_value=1000, value=400)\n    new_notes = st.text_input(\"Notes\")\n\n    submitted = st.form_submit_button(\"Add Workout\")\n    if submitted:\n        new_entry = pd.DataFrame({\n            'Day': [pd.to_datetime(new_date)],\n            'Workout': [new_workout],\n            'Duration (min)': [new_duration],\n            'Calories Burned': [new_calories],\n            'Notes': [new_notes]\n        })\n        df = pd.concat([df, new_entry], ignore_index=True)\n        df['Day'] = pd.to_datetime(df['Day'])\n        st.success(\"Workout added successfully!\")"
  },
  {
    "text": "### Instruction:\nCreate a complex travel dashboard using Streamlit\n\n### Input:\nApp category: travel, Complexity: complex, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport datetime\n\nst.set_page_config(page_title=\"Travel Dashboard\", layout=\"wide\")\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    data = {\n        'Destination': ['Paris', 'Rome', 'London', 'New York', 'Tokyo', 'Sydney', 'Barcelona', 'Amsterdam', 'Berlin', 'Dubai'],\n        'Continent': ['Europe', 'Europe', 'Europe', 'North America', 'Asia', 'Australia', 'Europe', 'Europe', 'Europe', 'Asia'],\n        'AverageCost': [2500, 2200, 2800, 3000, 3500, 4000, 2300, 2600, 2400, 3200],\n        'PopularityScore': [9.2, 8.9, 9.0, 8.5, 8.8, 8.7, 9.1, 8.6, 8.4, 8.3],\n        'Climate': ['Temperate', 'Mediterranean', 'Temperate', 'Temperate', 'Temperate', 'Subtropical', 'Mediterranean', 'Temperate', 'Temperate', 'Subtropical'],\n        'BestTimeToVisit': ['Spring', 'Spring', 'Spring', 'Fall', 'Spring', 'Fall', 'Spring', 'Spring', 'Summer', 'Winter'],\n        'Attractions': ['Eiffel Tower, Louvre', 'Colosseum, Vatican', 'Big Ben, Buckingham Palace', 'Statue of Liberty, Central Park', 'Tokyo Skytree, Senso-ji', 'Sydney Opera House, Harbour Bridge', 'Sagrada Familia, Park G\u00fcell', 'Canals, Anne Frank House', 'Brandenburg Gate, Reichstag', 'Burj Khalifa, Dubai Mall'],\n        'AccommodationCost': [150, 130, 170, 200, 180, 220, 140, 160, 150, 190],\n        'FoodCost': [70, 60, 80, 90, 75, 85, 65, 75, 70, 80],\n        'TransportationCost': [50, 40, 60, 70, 65, 75, 55, 65, 50, 60]\n    }\n    df = pd.DataFrame(data)\n    return df\n\ndf = load_data()\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\n\ncontinent_filter = st.sidebar.multiselect(\"Select Continent(s)\", options=df['Continent'].unique(), default=df['Continent'].unique())\nclimate_filter = st.sidebar.multiselect(\"Select Climate(s)\", options=df['Climate'].unique(), default=df['Climate'].unique())\nprice_range = st.sidebar.slider(\"Select Price Range\", min_value=int(df['AverageCost'].min()), max_value=int(df['AverageCost'].max()), value=(int(df['AverageCost'].min()), int(df['AverageCost'].max())))\nbest_time_filter = st.sidebar.multiselect(\"Best time to visit\", options=df['BestTimeToVisit'].unique(), default=df['BestTimeToVisit'].unique())\n\n# Apply filters\nfiltered_df = df[df['Continent'].isin(continent_filter) & df['Climate'].isin(climate_filter) & df['BestTimeToVisit'].isin(best_time_filter)]\nfiltered_df = filtered_df[(filtered_df['AverageCost'] >= price_range[0]) & (filtered_df['AverageCost'] <= price_range[1])]\n\n# Main content\nst.title(\"Travel Destination Dashboard\")\n\n# KPIs\ncol1, col2, col3 = st.columns(3)\n\navg_cost = filtered_df['AverageCost'].mean()\navg_popularity = filtered_df['PopularityScore'].mean()\n\nwith col1:\n    st.metric(\"Average Trip Cost\", f\"${avg_cost:.2f}\")\n\nwith col2:\n    st.metric(\"Average Popularity Score\", f\"{avg_popularity:.2f}\")\n\nwith col3:\n    num_destinations = len(filtered_df)\n    st.metric(\"Number of Destinations\", num_destinations)\n\n# Charts\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.subheader(\"Cost vs. Popularity\")\n    fig = px.scatter(filtered_df, x=\"AverageCost\", y=\"PopularityScore\", color=\"Continent\", hover_data=['Destination'], title=\"Cost vs. Popularity\")\n    st.plotly_chart(fig, use_container_width=True)\n\nwith col2:\n    st.subheader(\"Cost Distribution by Continent\")\n    fig = px.box(filtered_df, x=\"Continent\", y=\"AverageCost\", color=\"Continent\", title=\"Cost Distribution\")\n    st.plotly_chart(fig, use_container_width=True)\n\nst.subheader(\"Destinations Table\")\nst.dataframe(filtered_df.style.background_gradient(cmap='Blues'), use_container_width=True)\n\n# Destination Details\nst.subheader(\"Destination Details\")\nselected_destination = st.selectbox(\"Select a Destination\", options=filtered_df['Destination'].unique())\n\ndestination_data = filtered_df[filtered_df['Destination'] == selected_destination].iloc[0]\n\nst.write(f\"**Continent:** {destination_data['Continent']}\")\nst.write(f\"**Climate:** {destination_data['Climate']}\")\nst.write(f\"**Best Time to Visit:** {destination_data['BestTimeToVisit']}\")\nst.write(f\"**Attractions:** {destination_data['Attractions']}\")\nst.write(f\"**Accommodation Cost:** ${destination_data['AccommodationCost']}\")\nst.write(f\"**Food Cost:** ${destination_data['FoodCost']}\")\nst.write(f\"**Transportation Cost:** ${destination_data['TransportationCost']}\")"
  },
  {
    "text": "### Instruction:\nCreate a medium entertainment generator using Streamlit\n\n### Input:\nApp category: entertainment, Complexity: medium, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport random\nimport altair as alt\n\n# Sample Data for Movie Genres and Directors\ngenres = [\"Action\", \"Comedy\", \"Drama\", \"Sci-Fi\", \"Horror\", \"Thriller\", \"Romance\", \"Animation\", \"Documentary\"]\ndirectors = [\"Christopher Nolan\", \"Quentin Tarantino\", \"Greta Gerwig\", \"Steven Spielberg\", \"Alfred Hitchcock\", \"Stanley Kubrick\", \"Bong Joon-ho\"]\n\n# Streamlit App\nst.title(\"Movie Idea Generator\")\n\n# User Input\nst.sidebar.header(\"Preferences\")\nselected_genre = st.sidebar.multiselect(\"Select Movie Genre(s):\", genres, default=[\"Comedy\"])\nselected_directors = st.sidebar.multiselect(\"Select Director(s):\", directors, default=[\"Greta Gerwig\"])\nmin_rating = st.sidebar.slider(\"Minimum IMDB Rating:\", 1.0, 10.0, 6.0)\ninclude_sequel = st.sidebar.checkbox(\"Include Sequel Potential?\", value=True)\n\n# Movie Idea Generation Function\ndef generate_movie_idea(genres, directors, min_rating, sequel):\n    genre = random.choice(genres)\n    director = random.choice(directors)\n    title = f\"The {random.choice(['Mysterious', 'Hidden', 'Lost', 'Forgotten'])} {random.choice(['City', 'Island', 'Artifact', 'Secret'])}\"\n    plot_hook = f\"A {random.choice(['down-on-their-luck detective', 'brilliant scientist', 'struggling artist', 'rebellious teenager'])} uncovers a conspiracy that threatens the {random.choice(['world', 'city', 'family', 'future'])}.\"\n    rating = round(random.uniform(min_rating, 9.5), 1)\n    sequel_potential = \"High\" if sequel else \"Low\"\n    return {\"Title\": title, \"Genre\": genre, \"Director\": director, \"Plot Hook\": plot_hook, \"IMDB Rating\": rating, \"Sequel Potential\": sequel_potential}\n\n# Generate Movie Idea Button\nif st.button(\"Generate Movie Idea\"):\n    movie_idea = generate_movie_idea(selected_genre, selected_directors, min_rating, include_sequel)\n\n    st.subheader(\"Generated Movie Idea:\")\n    st.write(f\"**Title:** {movie_idea['Title']}\")\n    st.write(f\"**Genre:** {movie_idea['Genre']}\")\n    st.write(f\"**Director:** {movie_idea['Director']}\")\n    st.write(f\"**Plot Hook:** {movie_idea['Plot Hook']}\")\n    st.write(f\"**IMDB Rating (Projected):** {movie_idea['IMDB Rating']}\")\n    st.write(f\"**Sequel Potential:** {movie_idea['Sequel Potential']}\")\n\n    # Visualization of Rating\n    rating_data = pd.DataFrame({'Rating': [movie_idea['IMDB Rating']], 'Max Rating': [10]})\n    rating_chart = alt.Chart(rating_data).mark_bar().encode(\n        x=alt.X('Rating:Q', axis=alt.Axis(title='Projected IMDB Rating', format='.1f')),\n        y=alt.Y('Max Rating:Q', axis=None)\n    ).properties(\n        title='Projected IMDB Rating Visualization'\n    )\n    st.altair_chart(rating_chart, use_container_width=True)\n\n# Example Usage Display\nst.subheader(\"Example Movie Ideas\")\nexample_data = [\n    {\"Title\": \"The Lost City of El Dorado\", \"Genre\": \"Action\", \"Director\": \"Steven Spielberg\", \"Plot Hook\": \"A daring archaeologist searches for a legendary city.\", \"IMDB Rating\": 7.8, \"Sequel Potential\": \"High\"},\n    {\"Title\": \"A Funny Thing Happened on the Way to the Forum 2\", \"Genre\": \"Comedy\", \"Director\": \"Greta Gerwig\", \"Plot Hook\": \"A modern-day remix of the classic comedy.\", \"IMDB Rating\": 6.5, \"Sequel Potential\": \"Low\"},\n    {\"Title\": \"The Mysterious Island\", \"Genre\": \"Sci-Fi\", \"Director\": \"Christopher Nolan\", \"Plot Hook\": \"Stranded on a strange island, a group of scientists discovers a portal to another dimension.\", \"IMDB Rating\": 8.2, \"Sequel Potential\": \"High\"}\n]\nexample_df = pd.DataFrame(example_data)\nst.dataframe(example_df)"
  },
  {
    "text": "### Instruction:\nCreate a medium fitness analyzer using Streamlit\n\n### Input:\nApp category: fitness, Complexity: medium, Type: analyzer\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\nst.title('Fitness Data Analyzer')\n\n# Sample Data\ndata = {\n    'Date': pd.to_datetime(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05',\n                           '2024-01-06', '2024-01-07', '2024-01-08', '2024-01-09', '2024-01-10']),\n    'Steps': [5200, 6800, 4500, 7500, 9000, 3200, 8100, 6300, 10200, 5800],\n    'Calories Burned': [1800, 2200, 1600, 2400, 2800, 1200, 2600, 2000, 3000, 1900],\n    'Sleep Hours': [7.5, 6.0, 8.0, 7.0, 8.5, 5.5, 9.0, 7.0, 6.5, 7.0],\n    'Weight (kg)': [70.5, 70.3, 70.2, 70.1, 70.0, 70.0, 69.8, 69.7, 69.6, 69.5]\n}\ndf = pd.DataFrame(data)\ndf = df.set_index('Date')\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\ndate_range = st.sidebar.date_input(\"Select Date Range\", [df.index.min(), df.index.max()])\n\nif len(date_range) == 2:\n    start_date, end_date = date_range\n    df = df[(df.index >= pd.to_datetime(start_date)) & (df.index <= pd.to_datetime(end_date))]\n\n\n# Metrics\nst.header(\"Key Metrics\")\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Average Steps\", f\"{df['Steps'].mean():.0f}\")\ncol2.metric(\"Average Calories Burned\", f\"{df['Calories Burned'].mean():.0f}\")\ncol3.metric(\"Average Sleep Hours\", f\"{df['Sleep Hours'].mean():.1f}\")\n\n# Charts\nst.header(\"Visualizations\")\n\n# Steps and Calories Chart\nst.subheader(\"Steps vs Calories Burned\")\nchart_data = pd.DataFrame({'Steps': df['Steps'], 'Calories Burned': df['Calories Burned']})\nchart = alt.Chart(chart_data.reset_index()).mark_line().encode(\n    x=alt.X('Date', axis=alt.Axis(title='Date')),\n    y=alt.Y('Steps', axis=alt.Axis(title='Steps')),\n    tooltip=['Date', 'Steps', 'Calories Burned']\n).properties(\n    title='Steps and Calories Burned Over Time'\n)\n\nchart2 = alt.Chart(chart_data.reset_index()).mark_line(color='orange').encode(\n    x=alt.X('Date', axis=alt.Axis(title='Date')),\n    y=alt.Y('Calories Burned', axis=alt.Axis(title='Calories Burned')),\n    tooltip=['Date', 'Steps', 'Calories Burned']\n)\nst.altair_chart(chart + chart2, use_container_width=True)\n\n# Weight Tracking Chart\nst.subheader(\"Weight Over Time\")\nweight_data = pd.DataFrame({'Weight': df['Weight (kg)']})\nweight_chart = alt.Chart(weight_data.reset_index()).mark_line(color='red').encode(\n    x=alt.X('Date', axis=alt.Axis(title='Date')),\n    y=alt.Y('Weight', axis=alt.Axis(title='Weight (kg)')),\n    tooltip=['Date', 'Weight']\n).properties(\n    title='Weight Tracking'\n)\nst.altair_chart(weight_chart, use_container_width=True)\n\n# Sleep Hours Distribution\nst.subheader(\"Sleep Hours Distribution\")\nst.bar_chart(df['Sleep Hours'])\n\n# Data Table\nst.header(\"Raw Data\")\nst.dataframe(df)"
  },
  {
    "text": "### Instruction:\nCreate a simple food generator using Streamlit\n\n### Input:\nApp category: food, Complexity: simple, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport random\nimport altair as alt\n\nst.title(\"Random Recipe Generator\")\n\ningredients = [\n    \"Chicken Breast\", \"Salmon\", \"Tofu\", \"Pasta\", \"Rice\", \"Quinoa\", \"Broccoli\", \"Spinach\", \"Carrots\", \"Tomatoes\", \"Onions\", \"Garlic\", \"Potatoes\", \"Sweet Potatoes\", \"Bell Peppers\"\n]\n\ncuisines = [\n    \"Italian\", \"Mexican\", \"Asian\", \"Mediterranean\", \"American\"\n]\n\ndef generate_recipe():\n    num_ingredients = random.randint(3, 6)\n    selected_ingredients = random.sample(ingredients, num_ingredients)\n    cuisine = random.choice(cuisines)\n\n    recipe = {\n        \"Cuisine\": cuisine,\n        \"Ingredients\": \", \".join(selected_ingredients)\n    }\n    return recipe\n\nif st.button(\"Generate Recipe\"):\n    recipe = generate_recipe()\n    st.subheader(f\"{recipe['Cuisine']} Inspired Dish\")\n    st.write(f\"**Ingredients:** {recipe['Ingredients']}\")\n\n    # Sample calorie data (replace with actual data if available)\n    ingredient_calories = {ing: random.randint(50, 300) for ing in ingredients}\n    recipe_ingredients = recipe['Ingredients'].split(\", \")\n    calories = [ingredient_calories[ing] for ing in recipe_ingredients]\n    \n    cal_data = pd.DataFrame({'Ingredient': recipe_ingredients, 'Calories': calories})\n\n    chart = alt.Chart(cal_data).mark_bar().encode(\n        x='Ingredient:N',\n        y='Calories:Q',\n        tooltip=['Ingredient', 'Calories']\n    ).properties(\n        title='Calories per Ingredient'\n    )\n\n    st.altair_chart(chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a complex fitness calculator using Streamlit\n\n### Input:\nApp category: fitness, Complexity: complex, Type: calculator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom datetime import datetime\n\nst.set_page_config(page_title=\"Fitness Calculator\", page_icon=\"\ud83d\udcaa\")\n\n# Sample Data (replace with actual database connection in a real app)\n@st.cache_data\ndef load_data():\n    data = {\n        'exercise': ['Running', 'Swimming', 'Weightlifting', 'Yoga', 'Cycling'],\n        'calories_burned_per_hour': [600, 500, 300, 200, 400],\n        'muscle_groups': ['Legs', 'Full Body', 'Multiple', 'Core/Flexibility', 'Legs/Core']\n    }\n    return pd.DataFrame(data)\n\ndf = load_data()\n\n# Sidebar for navigation\nst.sidebar.header(\"Navigation\")\npage = st.sidebar.radio(\"Go to\", [\"BMI Calculator\", \"Calorie Calculator\", \"Workout Tracker\", \"Exercise Database\"])\n\n# --- BMI Calculator ---\nif page == \"BMI Calculator\":\n    st.header(\"Body Mass Index (BMI) Calculator\")\n\n    weight = st.number_input(\"Weight (kg)\", min_value=30.0, max_value=200.0, value=70.0, step=0.1)\n    height = st.number_input(\"Height (cm)\", min_value=100.0, max_value=250.0, value=175.0, step=0.1) / 100  # Convert cm to meters\n\n    bmi = weight / (height ** 2) if height > 0 else 0\n    st.metric(\"Your BMI\", value=f\"{bmi:.2f}\")\n\n    if bmi < 18.5:\n        st.warning(\"Underweight\")\n    elif 18.5 <= bmi < 25:\n        st.success(\"Normal weight\")\n    elif 25 <= bmi < 30:\n        st.warning(\"Overweight\")\n    else:\n        st.error(\"Obese\")\n\n# --- Calorie Calculator ---\nelif page == \"Calorie Calculator\":\n    st.header(\"Calorie Calculator\")\n\n    age = st.number_input(\"Age\", min_value=10, max_value=100, value=30)\n    gender = st.selectbox(\"Gender\", [\"Male\", \"Female\"])\n    activity_level = st.selectbox(\"Activity Level\", [\"Sedentary\", \"Lightly Active\", \"Moderately Active\", \"Very Active\", \"Extra Active\"])\n    weight_kg = st.number_input(\"Weight (kg)\", min_value=30, max_value=200, value=70)\n    height_cm = st.number_input(\"Height (cm)\", min_value=100, max_value=250, value=175)\n\n    # Harris-Benedict Equation (Revised)\n    if gender == \"Male\":\n        bmr = 88.362 + (13.397 * weight_kg) + (4.799 * height_cm) - (5.677 * age)\n    else:\n        bmr = 447.593 + (9.247 * weight_kg) + (3.098 * height_cm) - (4.330 * age)\n\n    activity_factors = {\n        \"Sedentary\": 1.2,\n        \"Lightly Active\": 1.375,\n        \"Moderately Active\": 1.55,\n        \"Very Active\": 1.725,\n        \"Extra Active\": 1.9\n    }\n\n    daily_calories = bmr * activity_factors[activity_level]\n    st.metric(\"Daily Calorie Needs\", value=f\"{daily_calories:.0f}\")\n\n    goal = st.selectbox(\"Goal\", [\"Maintain Weight\", \"Lose Weight\", \"Gain Weight\"])\n    calorie_adjustments = {\n        \"Maintain Weight\": 0,\n        \"Lose Weight\": -500,\n        \"Gain Weight\": 500\n    }\n\n    adjusted_calories = daily_calories + calorie_adjustments[goal]\n    st.metric(\"Adjusted Calorie Needs\", value=f\"{adjusted_calories:.0f}\")\n\n# --- Workout Tracker ---\nelif page == \"Workout Tracker\":\n    st.header(\"Workout Tracker\")\n\n    exercise_options = df['exercise'].tolist()\n    exercise = st.selectbox(\"Exercise\", exercise_options)\n    duration = st.number_input(\"Duration (minutes)\", min_value=1, max_value=180, value=30)\n    intensity = st.slider(\"Intensity (1-10)\", min_value=1, max_value=10, value=5)\n    date = st.date_input(\"Date\", datetime.now())\n\n    calories_burned_per_hour = df[df['exercise'] == exercise]['calories_burned_per_hour'].iloc[0]\n    calories_burned = (calories_burned_per_hour / 60) * duration\n\n    st.metric(\"Calories Burned\", value=f\"{calories_burned:.0f}\")\n\n    # Simulate saving the workout (replace with actual database write)\n    if st.button(\"Log Workout\"):\n        st.success(f\"Workout logged: {exercise} for {duration} minutes on {date.strftime('%Y-%m-%d')}\")\n\n        # Example Visualization: Weekly Calories Burned (dummy data)\n        weekly_data = {\n            'date': pd.date_range(date - pd.Timedelta(days=6), date, freq='D'),\n            'calories': np.random.randint(100, 800, size=7)\n        }\n        weekly_df = pd.DataFrame(weekly_data)\n        fig = px.line(weekly_df, x='date', y='calories', title='Weekly Calories Burned')\n        st.plotly_chart(fig)\n\n\n# --- Exercise Database ---\nelif page == \"Exercise Database\":\n    st.header(\"Exercise Database\")\n    st.dataframe(df, use_container_width=True)\n\n    muscle_group_filter = st.multiselect(\"Filter by Muscle Group\", df['muscle_groups'].unique())\n\n    filtered_df = df.copy()\n    if muscle_group_filter:\n        filtered_df = df[df['muscle_groups'].isin(muscle_group_filter)]\n\n    st.dataframe(filtered_df, use_container_width=True)\n\n    # Example Visualization: Calories Burned Distribution\n    fig = px.histogram(df, x='calories_burned_per_hour', title='Distribution of Calories Burned per Hour')\n    st.plotly_chart(fig)"
  },
  {
    "text": "### Instruction:\nCreate a complex productivity tracker using Streamlit\n\n### Input:\nApp category: productivity, Complexity: complex, Type: tracker\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nfrom datetime import date, timedelta\n\n# Sample Data\ndata = {\n    'Task': ['Task 1', 'Task 2', 'Task 3', 'Task 4', 'Task 5', 'Task 6', 'Task 7', 'Task 8'],\n    'Category': ['Work', 'Personal', 'Work', 'Personal', 'Work', 'Personal', 'Work', 'Personal'],\n    'Status': ['In Progress', 'Completed', 'To Do', 'In Progress', 'Completed', 'To Do', 'In Progress', 'Completed'],\n    'Priority': ['High', 'Medium', 'Low', 'High', 'Medium', 'Low', 'High', 'Medium'],\n    'Due Date': [date.today() + timedelta(days=i) for i in range(8)],\n    'Completion Date': [date.today() - timedelta(days=i) if i % 2 == 0 else None for i in range(8)],\n    'Notes': ['Note 1', 'Note 2', 'Note 3', 'Note 4', 'Note 5', 'Note 6', 'Note 7', 'Note 8']\n}\ndf = pd.DataFrame(data)\n\nst.set_page_config(layout=\"wide\")\n\nst.title(\"Task Tracker\")\n\n# Sidebar Filters\nst.sidebar.header(\"Filters\")\ncategory_filter = st.sidebar.multiselect(\"Category\", options=df['Category'].unique(), default=df['Category'].unique())\nstatus_filter = st.sidebar.multiselect(\"Status\", options=df['Status'].unique(), default=df['Status'].unique())\npriority_filter = st.sidebar.multiselect(\"Priority\", options=df['Priority'].unique(), default=df['Priority'].unique())\n\nfiltered_df = df[df['Category'].isin(category_filter) & df['Status'].isin(status_filter) & df['Priority'].isin(priority_filter)]\n\n# Metrics\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total Tasks\", len(df))\ncol2.metric(\"Completed Tasks\", len(df[df['Status'] == 'Completed']))\ncol3.metric(\"In Progress Tasks\", len(df[df['Status'] == 'In Progress']))\n\n# Data Table\nst.header(\"Task List\")\nst.dataframe(filtered_df.sort_values(by='Due Date'), use_container_width=True)\n\n# Charts\nst.header(\"Task Analysis\")\ncol4, col5 = st.columns(2)\n\nwith col4:\n    category_counts = filtered_df['Category'].value_counts().reset_index()\n    category_counts.columns = ['Category', 'Count']\n    fig_category = px.bar(category_counts, x='Category', y='Count', title='Tasks by Category')\n    st.plotly_chart(fig_category, use_container_width=True)\n\nwith col5:\n    status_counts = filtered_df['Status'].value_counts().reset_index()\n    status_counts.columns = ['Status', 'Count']\n    fig_status = px.pie(status_counts, names='Status', values='Count', title='Tasks by Status')\n    st.plotly_chart(fig_status, use_container_width=True)\n\n# Due Date Visualization\nst.header(\"Upcoming Deadlines\")\nupcoming_tasks = filtered_df[filtered_df['Status'] != 'Completed'].sort_values(by='Due Date')\nif not upcoming_tasks.empty:\n    fig_timeline = px.timeline(upcoming_tasks, x_start=\"Completion Date\", x_end=\"Due Date\", y=\"Task\", color=\"Priority\", title=\"Task Timeline\", hover_data=['Category', 'Status'])\n    fig_timeline.update_yaxes(autorange=\"reversed\")\n    st.plotly_chart(fig_timeline, use_container_width=True)\nelse:\n    st.write(\"No upcoming tasks.\")\n\n# Task Input Form\nst.header(\"Add New Task\")\nwith st.form(\"new_task_form\"):\n    new_task_name = st.text_input(\"Task Name\")\n    new_task_category = st.selectbox(\"Category\", options=df['Category'].unique())\n    new_task_status = st.selectbox(\"Status\", options=df['Status'].unique())\n    new_task_priority = st.selectbox(\"Priority\", options=df['Priority'].unique())\n    new_task_due_date = st.date_input(\"Due Date\")\n    new_task_notes = st.text_area(\"Notes\")\n    submitted = st.form_submit_button(\"Add Task\")\n\n    if submitted:\n        new_task = {\n            'Task': new_task_name,\n            'Category': new_task_category,\n            'Status': new_task_status,\n            'Priority': new_task_priority,\n            'Due Date': new_task_due_date,\n            'Completion Date': None,\n            'Notes': new_task_notes\n        }\n        df = pd.concat([df, pd.DataFrame([new_task])], ignore_index=True)\n        st.success(\"Task added successfully!\")\n\n        # Rerun to update the data table\n        st.rerun()"
  },
  {
    "text": "### Instruction:\nCreate a medium entertainment tracker using Streamlit\n\n### Input:\nApp category: entertainment, Complexity: medium, Type: tracker\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\n\nst.title(\"Movie Watchlist Tracker\")\n\n# Sample Data\ndata = {\n    'Movie Title': ['Oppenheimer', 'Barbie', 'Killers of the Flower Moon', 'Spider-Man: Across the Spider-Verse', 'Past Lives'],\n    'Genre': ['Biographical Drama', 'Comedy', 'Crime Drama', 'Animation', 'Romance'],\n    'Year': [2023, 2023, 2023, 2023, 2023],\n    'Rating': [8.6, 7.8, 7.9, 8.7, 8.0],\n    'Watched': [True, False, False, True, False],\n    'Personal Score': [9, None, None, 10, None]\n}\ndf = pd.DataFrame(data)\n\n# Sidebar for Filtering\nst.sidebar.header(\"Filters\")\ngenre_filter = st.sidebar.multiselect(\"Genre\", options=df['Genre'].unique(), default=df['Genre'].unique())\nyear_filter = st.sidebar.slider(\"Year\", min_value=2000, max_value=2023, value=(2010, 2023))\nwatched_filter = st.sidebar.selectbox(\"Watched Status\", options=['All', 'Watched', 'Not Watched'], index=0)\n\n# Apply Filters\nfiltered_df = df[df['Genre'].isin(genre_filter)]\nfiltered_df = filtered_df[(df['Year'] >= year_filter[0]) & (df['Year'] <= year_filter[1])]\n\nif watched_filter == 'Watched':\n    filtered_df = filtered_df[df['Watched'] == True]\nelif watched_filter == 'Not Watched':\n    filtered_df = filtered_df[df['Watched'] == False]\n\n# Main Content\nst.subheader(\"Filtered Movie List\")\nst.dataframe(filtered_df)\n\n# Data Visualization\nst.subheader(\"Ratings Distribution\")\nratings_chart = alt.Chart(filtered_df).mark_bar().encode(\n    x=alt.X('Rating:Q', bin=True),\n    y='count()',\n    tooltip=['Rating', 'count()']\n).properties(\n    title='Distribution of Movie Ratings'\n)\nst.altair_chart(ratings_chart, use_container_width=True)\n\n# Personal Score Chart (only show if there are watched movies)\nif filtered_df['Watched'].any():\n    watched_df = filtered_df[filtered_df['Watched'] == True].dropna(subset=['Personal Score'])\n    if not watched_df.empty:\n        st.subheader(\"Personal Scores\")\n        score_chart = alt.Chart(watched_df).mark_bar().encode(\n            x=alt.X('Movie Title:N', sort='-y'),\n            y='Personal Score:Q',\n            tooltip=['Movie Title', 'Personal Score']\n        ).properties(\n            title='Personal Scores for Watched Movies'\n        )\n        st.altair_chart(score_chart, use_container_width=True)\n    else:\n        st.write(\"No watched movies with personal scores to display.\")\nelse:\n    st.write(\"No watched movies in the current filter.\")\n\n# Add a movie form\nst.subheader(\"Add a Movie\")\nwith st.form(\"add_movie\"):\n    movie_title = st.text_input(\"Movie Title\")\n    genre = st.text_input(\"Genre\")\n    year = st.number_input(\"Year\", min_value=1900, max_value=2024, value=2023)\n    rating = st.number_input(\"Rating\", min_value=0.0, max_value=10.0, value=7.0, step=0.1)\n    watched = st.checkbox(\"Watched?\")\n    submit_button = st.form_submit_button(\"Add Movie\")\n\n    if submit_button:\n        new_movie = {'Movie Title': movie_title, 'Genre': genre, 'Year': year, 'Rating': rating, 'Watched': watched, 'Personal Score': None}\n        df = pd.concat([df, pd.DataFrame([new_movie])], ignore_index=True)\n        st.success(f\"Added {movie_title} to the watchlist!\")\n        #Rerun to update the view\n        st.experimental_rerun()"
  },
  {
    "text": "### Instruction:\nCreate a complex entertainment planner using Streamlit\n\n### Input:\nApp category: entertainment, Complexity: complex, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport altair as alt\nfrom datetime import datetime, date\nimport random\n\n# Sample Data\nsample_movies = [\n    {\"title\": \"Oppenheimer\", \"genre\": \"Drama\", \"rating\": 8.6, \"year\": 2023},\n    {\"title\": \"Barbie\", \"genre\": \"Comedy\", \"rating\": 7.8, \"year\": 2023},\n    {\"title\": \"Spider-Man: Into the Spider-Verse\", \"genre\": \"Animation\", \"rating\": 8.4, \"year\": 2018},\n    {\"title\": \"Everything Everywhere All at Once\", \"genre\": \"Sci-Fi\", \"rating\": 8.0, \"year\": 2022},\n    {\"title\": \"Parasite\", \"genre\": \"Thriller\", \"rating\": 8.5, \"year\": 2019},\n    {\"title\": \"The Shawshank Redemption\", \"genre\": \"Drama\", \"rating\": 9.3, \"year\": 1994},\n    {\"title\": \"The Godfather\", \"genre\": \"Crime\", \"rating\": 9.2, \"year\": 1972},\n    {\"title\": \"The Dark Knight\", \"genre\": \"Action\", \"rating\": 9.0, \"year\": 2008},\n    {\"title\": \"Pulp Fiction\", \"genre\": \"Crime\", \"rating\": 8.9, \"year\": 1994},\n    {\"title\": \"Forrest Gump\", \"genre\": \"Drama\", \"rating\": 8.8, \"year\": 1994},\n]\n\nsample_restaurants = [\n    {\"name\": \"Italian Delight\", \"cuisine\": \"Italian\", \"rating\": 4.5, \"price\": \"$$\"},\n    {\"name\": \"Sushi Zen\", \"cuisine\": \"Japanese\", \"rating\": 4.7, \"price\": \"$$$\"},\n    {\"name\": \"Burger Haven\", \"cuisine\": \"American\", \"rating\": 4.2, \"price\": \"$\"},\n    {\"name\": \"Taco Fiesta\", \"cuisine\": \"Mexican\", \"rating\": 4.4, \"price\": \"$$\"},\n    {\"name\": \"Thai Spice\", \"cuisine\": \"Thai\", \"rating\": 4.6, \"price\": \"$$$\"},\n]\n\n# App Layout\nst.set_page_config(page_title=\"Entertainment Planner\", page_icon=\":clapper:\", layout=\"wide\")\n\n# Sidebar\nwith st.sidebar:\n    st.header(\"Entertainment Planner\")\n    selected_date = st.date_input(\"Select Date\", date.today())\n    budget = st.number_input(\"Enter Budget\", min_value=0, value=50, step=10)\n    st.markdown(\"---\")\n    st.subheader(\"Filters\")\n    movie_genre = st.selectbox(\"Movie Genre\", [\"All\"] + list(set(movie[\"genre\"] for movie in sample_movies)))\n    restaurant_cuisine = st.selectbox(\"Restaurant Cuisine\", [\"All\"] + list(set(restaurant[\"cuisine\"] for restaurant in sample_restaurants)))\n\n# Main Area\nst.title(f\"Entertainment Plan for {selected_date.strftime('%Y-%m-%d')}\")\n\n# Movie Section\nst.header(\"Movie Selection\")\nfiltered_movies = [movie for movie in sample_movies if (movie_genre == \"All\" or movie[\"genre\"] == movie_genre)]\nif filtered_movies:\n    movie_options = [movie[\"title\"] for movie in filtered_movies]\n    selected_movie = st.selectbox(\"Choose a Movie\", movie_options)\n    movie_details = next(movie for movie in filtered_movies if movie[\"title\"] == selected_movie)\n    st.write(f\"You selected: **{movie_details['title']}** ({movie_details['year']}), Genre: {movie_details['genre']}, Rating: {movie_details['rating']}\")\nelse:\n    st.warning(\"No movies found matching your criteria.\")\n    selected_movie = None\n\n# Restaurant Section\nst.header(\"Restaurant Selection\")\nfiltered_restaurants = [restaurant for restaurant in sample_restaurants if (restaurant_cuisine == \"All\" or restaurant[\"cuisine\"] == restaurant_cuisine)]\nif filtered_restaurants:\n    restaurant_options = [restaurant[\"name\"] for restaurant in filtered_restaurants]\n    selected_restaurant = st.selectbox(\"Choose a Restaurant\", restaurant_options)\n    restaurant_details = next(restaurant for restaurant in filtered_restaurants if restaurant[\"name\"] == selected_restaurant)\n    st.write(f\"You selected: **{restaurant_details['name']}**, Cuisine: {restaurant_details['cuisine']}, Rating: {restaurant_details['rating']}, Price: {restaurant_details['price']}\")\nelse:\n    st.warning(\"No restaurants found matching your criteria.\")\n    selected_restaurant = None\n\n# Budget Visualization\nst.header(\"Budget Allocation\")\nif selected_movie and selected_restaurant:\n    movie_cost = random.randint(10, 25)\n    restaurant_cost = random.randint(20, 40)\n    remaining_budget = budget - movie_cost - restaurant_cost\n\n    data = pd.DataFrame({\n        'Category': ['Movie', 'Restaurant', 'Remaining'],\n        'Cost': [movie_cost, restaurant_cost, remaining_budget]\n    })\n\n    chart = alt.Chart(data).mark_bar().encode(\n        x='Category',\n        y='Cost',\n        tooltip=['Category', 'Cost']\n    ).properties(\n        title='Budget Breakdown'\n    )\n\n    st.altair_chart(chart, use_container_width=True)\n\n    if remaining_budget < 0:\n        st.error(f\"You are over budget by ${abs(remaining_budget)}!\")\n    else:\n        st.success(f\"You have ${remaining_budget} remaining in your budget.\")\n\nelif not selected_movie and not selected_restaurant:\n    st.info(\"Select a movie and a restaurant to see the budget allocation.\")\nelif not selected_movie:\n    st.info(\"Select a movie to see the budget allocation.\")\nelse:\n    st.info(\"Select a restaurant to see the budget allocation.\")"
  },
  {
    "text": "### Instruction:\nCreate a medium healthcare analyzer using Streamlit\n\n### Input:\nApp category: healthcare, Complexity: medium, Type: analyzer\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\n# Sample data (simulated patient health data)\nnp.random.seed(42)\nn_patients = 100\ndata = {\n    'PatientID': range(1, n_patients + 1),\n    'Age': np.random.randint(20, 80, n_patients),\n    'Gender': np.random.choice(['Male', 'Female'], n_patients),\n    'SystolicBP': np.random.randint(110, 180, n_patients),\n    'DiastolicBP': np.random.randint(70, 110, n_patients),\n    'Cholesterol': np.random.randint(150, 300, n_patients),\n    'Smoker': np.random.choice([True, False], n_patients, p=[0.25, 0.75]),\n    'ActivityLevel': np.random.choice(['Low', 'Moderate', 'High'], n_patients, p=[0.3, 0.5, 0.2]),\n    'RiskScore': np.random.normal(5, 2, n_patients)  # Generate a risk score\n}\ndf = pd.DataFrame(data)\ndf['RiskScore'] = df['RiskScore'].clip(0, 10).round(2)  # Ensure risk score is between 0 and 10\n\n\nst.title(\"Patient Health Analyzer\")\n\n# Sidebar for filtering and selection\nst.sidebar.header(\"Filters\")\ngender_filter = st.sidebar.multiselect(\"Select Gender\", options=df['Gender'].unique(), default=df['Gender'].unique())\nage_range = st.sidebar.slider(\"Select Age Range\", min_value=20, max_value=80, value=(20, 80))\nactivity_filter = st.sidebar.multiselect(\"Select Activity Level\", options=df['ActivityLevel'].unique(), default=df['ActivityLevel'].unique())\n\n# Apply filters\nfiltered_df = df[df['Gender'].isin(gender_filter)]\nfiltered_df = filtered_df[(filtered_df['Age'] >= age_range[0]) & (filtered_df['Age'] <= age_range[1])]\nfiltered_df = filtered_df[filtered_df['ActivityLevel'].isin(activity_filter)]\n\n# Display filtered data\nst.header(\"Filtered Patient Data\")\nst.dataframe(filtered_df)\n\n# Descriptive statistics\nst.header(\"Descriptive Statistics\")\nst.dataframe(filtered_df.describe())\n\n# Visualizations\nst.header(\"Visualizations\")\n\n# 1. Scatter plot of SystolicBP vs DiastolicBP colored by RiskScore\nst.subheader(\"Blood Pressure vs. Risk Score\")\nscatter_chart = alt.Chart(filtered_df).mark_circle(size=60).encode(\n    x='SystolicBP',\n    y='DiastolicBP',\n    color='RiskScore:Q',\n    tooltip=['PatientID', 'Age', 'Gender', 'RiskScore']\n).interactive()\nst.altair_chart(scatter_chart, use_container_width=True)\n\n# 2. Histogram of Age\nst.subheader(\"Age Distribution\")\nhist_chart = alt.Chart(filtered_df).mark_bar().encode(\n    alt.X(\"Age:Q\", bin=True),\n    y='count()',\n    tooltip=['Age', 'count()']\n).properties(\n    title=\"Age Distribution\"\n)\nst.altair_chart(hist_chart, use_container_width=True)\n\n# 3. Box plot of Cholesterol by Gender\nst.subheader(\"Cholesterol Distribution by Gender\")\nboxplot_chart = alt.Chart(filtered_df).mark_boxplot().encode(\n    x='Gender:N',\n    y='Cholesterol:Q',\n    tooltip=['Gender', 'Cholesterol']\n).properties(\n    title=\"Cholesterol Distribution by Gender\"\n)\nst.altair_chart(boxplot_chart, use_container_width=True)\n\n# Risk Score Distribution\nst.subheader(\"Risk Score Distribution\")\nrisk_hist = alt.Chart(filtered_df).mark_bar().encode(\n    alt.X(\"RiskScore:Q\", bin=alt.Bin(maxbins=20)),\n    y='count()',\n    tooltip=['RiskScore', 'count()']\n).properties(\n    title=\"Risk Score Distribution\"\n)\nst.altair_chart(risk_hist, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a medium automotive dashboard using Streamlit\n\n### Input:\nApp category: automotive, Complexity: medium, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\n# Sample Data\nnp.random.seed(42)\ndata = {\n    'Date': pd.to_datetime(pd.date_range('2023-01-01', periods=100, freq='D')),\n    'Sales': np.random.randint(50, 200, 100),\n    'Marketing Spend': np.random.randint(1000, 5000, 100),\n    'Website Visits': np.random.randint(500, 2000, 100),\n    'Region': np.random.choice(['North', 'South', 'East', 'West'], 100),\n    'Vehicle Type': np.random.choice(['Sedan', 'SUV', 'Truck', 'Hybrid'], 100)\n}\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.title('Automotive Sales Dashboard')\n\n# Sidebar Filters\nst.sidebar.header('Filters')\nregion_filter = st.sidebar.multiselect('Region', options=df['Region'].unique(), default=df['Region'].unique())\nvehicle_type_filter = st.sidebar.multiselect('Vehicle Type', options=df['Vehicle Type'].unique(), default=df['Vehicle Type'].unique())\ndate_range = st.sidebar.date_input(\"Date Range\", [df['Date'].min(), df['Date'].max()])\n\n# Filter Data\nfiltered_df = df[df['Region'].isin(region_filter) & df['Vehicle Type'].isin(vehicle_type_filter) & ((df['Date'] >= pd.to_datetime(date_range[0])) & (df['Date'] <= pd.to_datetime(date_range[1])))]\n\n# Metrics\ntotal_sales = filtered_df['Sales'].sum()\navg_marketing_spend = filtered_df['Marketing Spend'].mean()\ntotal_website_visits = filtered_df['Website Visits'].sum()\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total Sales\", total_sales)\ncol2.metric(\"Avg. Marketing Spend\", f\"${avg_marketing_spend:,.2f}\")\ncol3.metric(\"Total Website Visits\", total_website_visits)\n\n# Charts\n# Sales Over Time\nsales_chart = alt.Chart(filtered_df).mark_line().encode(\n    x=alt.X('Date', title='Date'),\n    y=alt.Y('Sales', title='Sales'),\n    tooltip=['Date', 'Sales']\n).properties(\n    title='Sales Over Time'\n)\nst.altair_chart(sales_chart, use_container_width=True)\n\n# Sales by Region\nsales_by_region = filtered_df.groupby('Region')['Sales'].sum().reset_index()\nregion_chart = alt.Chart(sales_by_region).mark_bar().encode(\n    x=alt.X('Region', title='Region'),\n    y=alt.Y('Sales', title='Total Sales'),\n    tooltip=['Region', 'Sales']\n).properties(\n    title='Sales by Region'\n)\nst.altair_chart(region_chart, use_container_width=True)\n\n# Data Table\nst.subheader('Filtered Data')\nst.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a simple productivity planner using Streamlit\n\n### Input:\nApp category: productivity, Complexity: simple, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport datetime\nimport altair as alt\n\nst.title(\"Weekly Planner\")\n\n# Sample Data\ndata = {\n    'Task': ['Meeting with Team', 'Work on Project Proposal', 'Grocery Shopping', 'Gym Workout', 'Review Reports'],\n    'Day': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n    'Time': ['10:00', '14:00', '18:00', '07:00', '11:00'],\n    'Category': ['Work', 'Work', 'Personal', 'Personal', 'Work']\n}\ndf = pd.DataFrame(data)\n\n# Input fields for new tasks\nwith st.expander(\"Add New Task\"):\n    new_task = st.text_input(\"Task Name:\")\n    new_day = st.selectbox(\"Day:\", ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])\n    new_time = st.time_input(\"Time:\", datetime.time(12, 00))\n    new_category = st.selectbox(\"Category:\", ['Work', 'Personal'])\n\n    if st.button(\"Add Task\"):\n        new_row = {'Task': new_task, 'Day': new_day, 'Time': new_time.strftime(\"%H:%M\"), 'Category': new_category}\n        df = pd.concat([df, pd.DataFrame(new_row, index=[0])], ignore_index=True)\n        st.success(\"Task added!\")\n\n# Display planner\nst.subheader(\"Weekly Tasks\")\nst.dataframe(df)\n\n# Visualization\nst.subheader(\"Task Distribution by Category\")\ncategory_counts = df['Category'].value_counts().reset_index()\ncategory_counts.columns = ['Category', 'Count']\n\nchart = alt.Chart(category_counts).mark_bar().encode(\n    x='Category:N',\n    y='Count:Q',\n    tooltip=['Category', 'Count']\n).properties(\n    title='Task Distribution'\n)\n\nst.altair_chart(chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a simple travel generator using Streamlit\n\n### Input:\nApp category: travel, Complexity: simple, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport random\nimport altair as alt\n\nst.title(\"Travel Itinerary Generator\")\n\n# Sample Data\ndestinations = [\"Paris\", \"Rome\", \"Tokyo\", \"New York\", \"London\"]\nactivities = {\n    \"Paris\": [\"Visit the Eiffel Tower\", \"Explore the Louvre Museum\", \"Stroll along the Seine River\"],\n    \"Rome\": [\"See the Colosseum\", \"Visit the Vatican City\", \"Throw a coin in the Trevi Fountain\"],\n    \"Tokyo\": [\"Explore Shibuya Crossing\", \"Visit the Senso-ji Temple\", \"Enjoy a traditional tea ceremony\"],\n    \"New York\": [\"Visit Times Square\", \"See the Statue of Liberty\", \"Walk through Central Park\"],\n    \"London\": [\"Visit Buckingham Palace\", \"Explore the British Museum\", \"Ride the London Eye\"]\n}\n\n# User Input\ndestination = st.selectbox(\"Choose your destination:\", destinations)\nnum_days = st.slider(\"How many days will you be traveling?\", 1, 7, 3)\n\n# Generate Itinerary\nif st.button(\"Generate Itinerary\"):\n    st.subheader(f\"Your {num_days}-Day Itinerary for {destination}:\")\n\n    itinerary = []\n    available_activities = activities[destination].copy()\n    for day in range(1, num_days + 1):\n        if not available_activities:\n            available_activities = activities[destination].copy()\n        activity = random.choice(available_activities)\n        available_activities.remove(activity)\n        itinerary.append(f\"Day {day}: {activity}\")\n\n    for item in itinerary:\n        st.write(item)\n\n    # Create a sample dataframe for a chart\n    data = {'Day': range(1, num_days + 1),\n            'Enjoyment': [random.randint(7, 10) for _ in range(num_days)],  # Scale of 1-10\n            'Cost': [random.randint(30, 150) for _ in range(num_days)]}  # Estimated cost per day\n    df = pd.DataFrame(data)\n\n    # Altair Chart: Enjoyment Level\n    chart = alt.Chart(df).mark_line(point=True).encode(\n        x=alt.X('Day:O', title='Day'),\n        y=alt.Y('Enjoyment:Q', title='Enjoyment Level (1-10)'),\n        tooltip=['Day', 'Enjoyment', 'Cost']\n    ).properties(\n        title=f'Enjoyment Level Prediction for Your Trip to {destination}'\n    )\n    st.altair_chart(chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a complex productivity dashboard using Streamlit\n\n### Input:\nApp category: productivity, Complexity: complex, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\n# Sample Data\n@st.cache_data\ndef load_data(rows):\n    data = {\n        'Task': [f'Task {i+1}' for i in range(rows)],\n        'Category': np.random.choice(['Project A', 'Project B', 'Project C'], rows),\n        'Status': np.random.choice(['To Do', 'In Progress', 'Completed'], rows),\n        'Priority': np.random.choice(['High', 'Medium', 'Low'], rows),\n        'Due Date': [datetime.now() + timedelta(days=np.random.randint(1, 30)) for _ in range(rows)],\n        'Effort': np.random.randint(1, 9, rows), # Effort in hours\n        'Assigned To': np.random.choice(['Alice', 'Bob', 'Charlie'], rows),\n        'Completion Rate': np.random.rand(rows)\n    }\n    return pd.DataFrame(data)\n\ndata = load_data(100)\n\n# App Layout\nst.set_page_config(page_title=\"Productivity Dashboard\", layout=\"wide\")\nst.title(\"Productivity Dashboard\")\n\n# Sidebar Filters\nst.sidebar.header(\"Filters\")\ncategory_filter = st.sidebar.multiselect(\"Category\", options=data['Category'].unique(), default=data['Category'].unique())\nstatus_filter = st.sidebar.multiselect(\"Status\", options=data['Status'].unique(), default=data['Status'].unique())\npriority_filter = st.sidebar.multiselect(\"Priority\", options=data['Priority'].unique(), default=data['Priority'].unique())\nassignee_filter = st.sidebar.multiselect(\"Assigned To\", options=data['Assigned To'].unique(), default=data['Assigned To'].unique())\n\n# Apply Filters\nfiltered_data = data[\n    data['Category'].isin(category_filter) &\n    data['Status'].isin(status_filter) &\n    data['Priority'].isin(priority_filter) &\n    data['Assigned To'].isin(assignee_filter)\n]\n\n# Metrics\ncol1, col2, col3 = st.columns(3)\nwith col1:\n    st.metric(\"Total Tasks\", len(filtered_data))\nwith col2:\n    avg_effort = filtered_data['Effort'].mean()\n    st.metric(\"Average Effort (Hours)\", f\"{avg_effort:.2f}\")\nwith col3:\n    completed_tasks = len(filtered_data[filtered_data['Status'] == 'Completed'])\n    st.metric(\"Completed Tasks\", completed_tasks)\n\n# Charts\ncol4, col5 = st.columns(2)\n\nwith col4:\n    st.subheader(\"Tasks by Status\")\n    status_counts = filtered_data['Status'].value_counts().reset_index()\n    status_counts.columns = ['Status', 'Count']\n    chart = alt.Chart(status_counts).mark_bar().encode(\n        x='Status',\n        y='Count',\n        tooltip=['Status', 'Count']\n    ).properties(title=\"Tasks by Status\")\n    st.altair_chart(chart, use_container_width=True)\n\nwith col5:\n    st.subheader(\"Effort Distribution by Category\")\n    avg_effort_by_category = filtered_data.groupby('Category')['Effort'].mean().reset_index()\n    avg_effort_by_category.columns = ['Category', 'Average Effort']\n    chart = alt.Chart(avg_effort_by_category).mark_bar().encode(\n        x='Category',\n        y='Average Effort',\n        tooltip=['Category', 'Average Effort']\n    ).properties(title=\"Average Effort by Category\")\n    st.altair_chart(chart, use_container_width=True)\n\n# Data Table\nst.subheader(\"Task Details\")\nst.dataframe(filtered_data)\n\n# Additional Charts and Metrics (optional)\nst.subheader(\"Task Completion Rate vs Due Date\")\nchart2 = alt.Chart(filtered_data).mark_line().encode(\n    x=alt.X('Due Date', axis=alt.Axis(format=\"%m/%d\")),\n    y='Completion Rate',\n    tooltip=['Task', 'Due Date', 'Completion Rate']\n).properties(title=\"Task Completion Rate Over Time\")\nst.altair_chart(chart2, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a medium technology tracker using Streamlit\n\n### Input:\nApp category: technology, Complexity: medium, Type: tracker\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\nimport datetime\n\n# Sample Data\ndata = {\n    'Date': [datetime.date(2023, 1, 1), datetime.date(2023, 1, 8), datetime.date(2023, 1, 15), datetime.date(2023, 1, 22),\n             datetime.date(2023, 1, 29), datetime.date(2023, 2, 5), datetime.date(2023, 2, 12), datetime.date(2023, 2, 19),\n             datetime.date(2023, 2, 26), datetime.date(2023, 3, 5)],\n    'Feature1_Progress': [20, 35, 50, 75, 90, 95, 100, 100, 100, 100],\n    'Feature2_Progress': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],\n    'Feature3_Progress': [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],\n    'Bug_Fixes': [2, 5, 3, 7, 1, 4, 2, 0, 1, 0],\n    'Deployment_Success': [True, True, False, True, True, False, True, True, True, True]\n}\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.title('Technology Development Tracker')\n\n# Date Range Filter\nstart_date = st.date_input(\"Start Date\", df['Date'].min())\nend_date = st.date_input(\"End Date\", df['Date'].max())\n\ndf_filtered = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]\n\n# Progress Bar Chart\nst.subheader('Feature Progress')\nprogress_data = df_filtered[['Date', 'Feature1_Progress', 'Feature2_Progress', 'Feature3_Progress']].set_index('Date')\nst.line_chart(progress_data)\n\n# Bug Fixes Bar Chart\nst.subheader('Bug Fixes Over Time')\nst.bar_chart(df_filtered[['Date', 'Bug_Fixes']].set_index('Date'))\n\n# Deployment Success Rate\nst.subheader('Deployment Success Rate')\nsuccess_count = df_filtered['Deployment_Success'].sum()\ntotal_count = len(df_filtered)\nsuccess_rate = (success_count / total_count) * 100 if total_count > 0 else 0\nst.metric(label=\"Success Rate\", value=f\"{success_rate:.2f}%\")\n\n# Data Table\nst.subheader('Raw Data')\nst.dataframe(df_filtered)"
  },
  {
    "text": "### Instruction:\nCreate a simple productivity dashboard using Streamlit\n\n### Input:\nApp category: productivity, Complexity: simple, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n# Sample Data\ndata = {\n    'Task': ['Emailing', 'Meeting', 'Report Writing', 'Data Analysis', 'Project Planning'],\n    'Status': ['Completed', 'In Progress', 'To Do', 'In Progress', 'Completed'],\n    'Priority': ['High', 'Medium', 'High', 'Low', 'Medium'],\n    'Due Date': ['2024-03-10', '2024-03-15', '2024-03-20', '2024-03-25', '2024-03-05'],\n    'Assignee': ['Alice', 'Bob', 'Alice', 'Charlie', 'Bob'],\n    'Effort (hours)': [2, 3, 5, 8, 4]\n}\n\ndf = pd.DataFrame(data)\ndf['Due Date'] = pd.to_datetime(df['Due Date'])\n\n# Streamlit App\nst.title('Productivity Dashboard')\n\n# Filters\nstatus_filter = st.multiselect('Status', options=df['Status'].unique(), default=df['Status'].unique())\npriority_filter = st.multiselect('Priority', options=df['Priority'].unique(), default=df['Priority'].unique())\nassignee_filter = st.multiselect('Assignee', options=df['Assignee'].unique(), default=df['Assignee'].unique())\n\n# Apply Filters\nfiltered_df = df[\n    (df['Status'].isin(status_filter)) &\n    (df['Priority'].isin(priority_filter)) &\n    (df['Assignee'].isin(assignee_filter))\n]\n\n# Metrics\ntotal_tasks = len(filtered_df)\ncompleted_tasks = len(filtered_df[filtered_df['Status'] == 'Completed'])\navg_effort = filtered_df['Effort (hours)'].mean() if not filtered_df.empty else 0\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total Tasks\", total_tasks)\ncol2.metric(\"Completed Tasks\", completed_tasks)\ncol3.metric(\"Average Effort (hours)\", f\"{avg_effort:.2f}\")\n\n# Charts\n# Task Distribution by Status\nstatus_counts = filtered_df['Status'].value_counts().reset_index()\nstatus_counts.columns = ['Status', 'Count']\nfig_status = px.bar(status_counts, x='Status', y='Count', title='Task Distribution by Status')\nst.plotly_chart(fig_status, use_container_width=True)\n\n# Task Distribution by Assignee\nassignee_counts = filtered_df['Assignee'].value_counts().reset_index()\nassignee_counts.columns = ['Assignee', 'Count']\nfig_assignee = px.bar(assignee_counts, x='Assignee', y='Count', title='Task Distribution by Assignee')\nst.plotly_chart(fig_assignee, use_container_width=True)\n\n# Display Data Table\nst.subheader('Task Details')\nst.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a complex healthcare planner using Streamlit\n\n### Input:\nApp category: healthcare, Complexity: complex, Type: planner\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    today = datetime.now()\n    dates = [today + timedelta(days=i) for i in range(30)]\n    patient_names = ['Alice Smith', 'Bob Johnson', 'Charlie Brown', 'Diana Miller', 'Eve Davis']\n    procedures = ['Checkup', 'Consultation', 'Lab Test', 'X-Ray', 'MRI']\n    data = []\n    for date in dates:\n        for i in range(np.random.randint(1, 4)):\n            patient = np.random.choice(patient_names)\n            procedure = np.random.choice(procedures)\n            data.append([date, patient, procedure, np.random.choice(['Scheduled', 'Completed', 'Cancelled'])])\n    df = pd.DataFrame(data, columns=['Date', 'Patient Name', 'Procedure', 'Status'])\n    df['Date'] = pd.to_datetime(df['Date'])\n    return df\n\ndf = load_data()\n\n# App Title\nst.title('Healthcare Appointment Planner')\n\n# Sidebar Filters\nst.sidebar.header('Filters')\n\ndate_range = st.sidebar.date_input('Date Range', [df['Date'].min().date(), df['Date'].max().date()])\nif len(date_range) == 2:\n    start_date, end_date = date_range\n    df = df[(df['Date'].dt.date >= start_date) & (df['Date'].dt.date <= end_date)]\n\npatient_filter = st.sidebar.multiselect('Patient Name', options=df['Patient Name'].unique(), default=df['Patient Name'].unique())\ndf = df[df['Patient Name'].isin(patient_filter)]\n\nprocedure_filter = st.sidebar.multiselect('Procedure', options=df['Procedure'].unique(), default=df['Procedure'].unique())\ndf = df[df['Procedure'].isin(procedure_filter)]\n\nstatus_filter = st.sidebar.multiselect('Status', options=df['Status'].unique(), default=df['Status'].unique())\ndf = df[df['Status'].isin(status_filter)]\n\n\n# Main Content\nst.header('Appointments')\nst.dataframe(df, use_container_width=True)\n\n\n# Charts\nst.header('Appointment Statistics')\n\n# Appointments by Procedure\nprocedure_counts = df['Procedure'].value_counts().reset_index()\nprocedure_counts.columns = ['Procedure', 'Count']\nprocedure_chart = alt.Chart(procedure_counts).mark_bar().encode(\n    x=alt.X('Procedure', sort='-y'),\n    y='Count',\n    tooltip=['Procedure', 'Count']\n).properties(\n    title='Appointments by Procedure'\n)\nst.altair_chart(procedure_chart, use_container_width=True)\n\n\n# Appointments by Status\nstatus_counts = df['Status'].value_counts().reset_index()\nstatus_counts.columns = ['Status', 'Count']\nstatus_chart = alt.Chart(status_counts).mark_arc().encode(\n    theta=alt.Theta(field=\"Count\", type=\"quantitative\"),\n    color=alt.Color(field=\"Status\", type=\"nominal\"),\n    tooltip=['Status', 'Count']\n).properties(\n    title='Appointments by Status'\n)\nst.altair_chart(status_chart, use_container_width=True)\n\n# Daily Appointments\ndaily_appointments = df.groupby(df['Date'].dt.date).size().reset_index(name='Count')\ndaily_appointments.columns = ['Date', 'Count']\ndaily_appointments_chart = alt.Chart(daily_appointments).mark_line().encode(\n    x='Date:T',\n    y='Count:Q',\n    tooltip=['Date', 'Count']\n).properties(\n    title='Daily Appointments'\n)\nst.altair_chart(daily_appointments_chart, use_container_width=True)"
  },
  {
    "text": "### Instruction:\nCreate a complex entertainment monitor using Streamlit\n\n### Input:\nApp category: entertainment, Complexity: complex, Type: monitor\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport time\n\n# Set page config\nst.set_page_config(page_title=\"Entertainment Monitor\", page_icon=\":clapper:\", layout=\"wide\")\n\n# Sample data (replace with your actual data source)\n@st.cache_data\ndef load_data():\n    np.random.seed(42)\n    data = {\n        'Date': pd.date_range(start='2023-01-01', end='2023-12-31', freq='D'),\n        'Movie_Views': np.random.randint(1000, 10000, size=365),\n        'TV_Views': np.random.randint(500, 8000, size=365),\n        'Game_Downloads': np.random.randint(2000, 12000, size=365),\n        'Music_Streams': np.random.randint(3000, 15000, size=365),\n        'Social_Media_Engagement': np.random.randint(10000, 50000, size=365),\n        'Marketing_Spend': np.random.randint(100, 500, size=365)\n    }\n    df = pd.DataFrame(data)\n    df['Total_Views'] = df['Movie_Views'] + df['TV_Views'] + df['Game_Downloads'] + df['Music_Streams']\n    return df\n\ndf = load_data()\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\ndate_range = st.sidebar.date_input(\"Select Date Range\", \n                                    [df['Date'].min(), df['Date'].max()],\n                                    min_value=df['Date'].min(),\n                                    max_value=df['Date'].max())\n\nstart_date, end_date = date_range\n\nfiltered_df = df[(df['Date'] >= start_date) & (df['Date'] <= end_date)]\n\n# Main content\nst.title(\"Entertainment Platform Performance Monitor\")\n\n# KPIs\ntotal_views = filtered_df['Total_Views'].sum()\navg_daily_views = filtered_df['Total_Views'].mean()\nmax_daily_views = filtered_df['Total_Views'].max()\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total Views\", f\"{total_views:,}\")\ncol2.metric(\"Avg. Daily Views\", f\"{avg_daily_views:,.0f}\")\ncol3.metric(\"Max. Daily Views\", f\"{max_daily_views:,}\")\n\n# Charts\nst.subheader(\"Daily Performance\")\n\n# Time Series Chart\nfig_time_series = px.line(filtered_df, x=\"Date\", y=['Movie_Views', 'TV_Views', 'Game_Downloads', 'Music_Streams'],\n                     title=\"Daily Entertainment Consumption\")\nst.plotly_chart(fig_time_series, use_container_width=True)\n\n# Engagement vs Spend\nst.subheader(\"Engagement vs. Marketing Spend\")\nfig_scatter = px.scatter(filtered_df, x=\"Marketing_Spend\", y=\"Social_Media_Engagement\", \n                     title=\"Social Media Engagement vs. Marketing Spend\",\n                     trendline=\"ols\")\nst.plotly_chart(fig_scatter, use_container_width=True)\n\n# Data Table\nst.subheader(\"Raw Data\")\nst.dataframe(filtered_df)\n\n# Performance Updates (Simulated Real-time)\nst.subheader(\"Real-time Updates (Simulated)\")\nprogress_bar = st.progress(0)\nstatus_text = st.empty()\n\nfor i in range(101):\n    status_text.text(f\"Simulating Update: {i}% complete\")\n    progress_bar.progress(i)\n    time.sleep(0.02)  # Simulate data update time\n\nstatus_text.text(\"Real-time data simulation complete!\")"
  },
  {
    "text": "### Instruction:\nCreate a complex automotive generator using Streamlit\n\n### Input:\nApp category: automotive, Complexity: complex, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\ndef generate_car_data(n):\n    np.random.seed(42)  # for reproducibility\n    data = {\n        'Make': np.random.choice(['Toyota', 'Honda', 'Ford', 'BMW', 'Mercedes'], n),\n        'Model': [f'Model {i}' for i in range(1, n+1)],\n        'Year': np.random.randint(2010, 2024, n),\n        'Mileage': np.random.randint(10000, 200000, n),\n        'Price': np.random.randint(10000, 60000, n),\n        'Engine_Size': np.random.uniform(1.0, 5.0, n),\n        'Fuel_Type': np.random.choice(['Gasoline', 'Diesel', 'Electric', 'Hybrid'], n),\n        'Transmission': np.random.choice(['Automatic', 'Manual'], n),\n        'Color': np.random.choice(['Red', 'Blue', 'Silver', 'Black', 'White'], n),\n        'Accidents': np.random.randint(0, 3, n)\n    }\n    return pd.DataFrame(data)\n\n# Streamlit App\nst.set_page_config(page_title=\"Automotive Data Generator & Analyzer\", page_icon=\"\ud83d\ude97\")\n\nst.title(\"\ud83d\ude97 Automotive Data Generator & Analyzer\")\n\n# Sidebar for input\nst.sidebar.header(\"Data Generation Parameters\")\nnum_records = st.sidebar.slider(\"Number of Records\", 10, 500, 100, step=10)\ndata = generate_car_data(num_records)\n\n# Main content\nst.header(\"Generated Data\")\nst.dataframe(data.head())\n\n# Data Summary\nst.subheader(\"Data Summary\")\nst.write(f\"Total records: {len(data)}\")\nst.write(data.describe())\n\n# Data Visualization Section\nst.header(\"Data Visualizations\")\n\n# Price Distribution\nst.subheader(\"Price Distribution\")\nprice_hist = alt.Chart(data).mark_bar().encode(\n    alt.X(\"Price:Q\", bin=True),\n    y='count()'\n).properties(\n    title=\"Distribution of Car Prices\"\n)\nst.altair_chart(price_hist, use_container_width=True)\n\n# Mileage vs Price\nst.subheader(\"Mileage vs Price\")\nmileage_scatter = alt.Chart(data).mark_circle().encode(\n    x='Mileage:Q',\n    y='Price:Q',\n    color='Fuel_Type:N',\n    tooltip=['Make', 'Model', 'Year', 'Mileage', 'Price']\n).properties(\n    title=\"Mileage vs Price\"\n)\nst.altair_chart(mileage_scatter, use_container_width=True)\n\n# Make Distribution\nst.subheader(\"Make Distribution\")\nmake_counts = data['Make'].value_counts().reset_index()\nmake_counts.columns = ['Make', 'Count']\nmake_bar = alt.Chart(make_counts).mark_bar().encode(\n    x='Make:N',\n    y='Count:Q',\n    tooltip=['Make', 'Count']\n).properties(\n    title=\"Distribution of Car Makes\"\n)\nst.altair_chart(make_bar, use_container_width=True)\n\n# Accidents Distribution\nst.subheader(\"Accidents Distribution\")\naccidents_counts = data['Accidents'].value_counts().sort_index().reset_index()\naccidents_counts.columns = ['Accidents', 'Count']\naccidents_line = alt.Chart(accidents_counts).mark_line().encode(\n    x=alt.X('Accidents:O', title='Number of Accidents'),\n    y='Count:Q',\n    tooltip=['Accidents', 'Count']\n).properties(\n    title=\"Distribution of Accidents\"\n)\nst.altair_chart(accidents_line, use_container_width=True)\n\n# Download the data\nst.download_button(\n    label=\"Download data as CSV\",\n    data=data.to_csv(index=False).encode('utf-8'),\n    file_name='car_data.csv',\n    mime='text/csv',\n)\n\nst.sidebar.subheader(\"About\")\nst.sidebar.info(\"This app generates and visualizes synthetic automotive data.  Use the sidebar to adjust the number of records.\")"
  },
  {
    "text": "### Instruction:\nCreate a simple entertainment generator using Streamlit\n\n### Input:\nApp category: entertainment, Complexity: simple, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport random\nimport altair as alt\n\n# Sample data for movie suggestions\nmovie_data = {\n    'title': ['The Shawshank Redemption', 'The Godfather', 'The Dark Knight', 'Pulp Fiction', 'Schindler\\'s List', 'The Lord of the Rings', 'Fight Club', 'Forrest Gump'],\n    'genre': ['Drama', 'Crime', 'Action', 'Crime', 'Drama', 'Fantasy', 'Drama', 'Drama'],\n    'rating': [9.3, 9.2, 9.0, 8.9, 8.9, 8.8, 8.8, 8.8],\n    'year': [1994, 1972, 2008, 1994, 1993, 2003, 1999, 1994]\n}\n\ndf = pd.DataFrame(movie_data)\n\nst.title('Movie Recommendation Generator')\n\n# User input for genre preference\nselected_genre = st.selectbox('Select your preferred genre:', ['All'] + list(df['genre'].unique()))\n\n# Filter movies based on genre\nif selected_genre == 'All':\n    filtered_movies = df\nelse:\n    filtered_movies = df[df['genre'] == selected_genre]\n\n# Generate a random movie suggestion\nif not filtered_movies.empty:\n    random_movie = filtered_movies.sample(n=1)\n    st.subheader('Here\\'s a movie suggestion for you:')\n    st.write(f\"**Title:** {random_movie['title'].values[0]}\")\n    st.write(f\"**Genre:** {random_movie['genre'].values[0]}\")\n    st.write(f\"**Rating:** {random_movie['rating'].values[0]}\")\n    st.write(f\"**Year:** {random_movie['year'].values[0]}\")\n\n    # Create a bar chart of movie ratings\n    chart_data = df.sort_values(by='rating', ascending=False).head(5)\n    chart = alt.Chart(chart_data).mark_bar().encode(\n        x=alt.X('title', sort='-y'),\n        y='rating',\n        tooltip=['title', 'rating', 'genre', 'year']\n    ).properties(\n        title='Top 5 Rated Movies'\n    )\n    st.altair_chart(chart, use_container_width=True)\n\nelse:\n    st.write('No movies found for the selected genre.')"
  },
  {
    "text": "### Instruction:\nCreate a complex healthcare tracker using Streamlit\n\n### Input:\nApp category: healthcare, Complexity: complex, Type: tracker\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    today = datetime.today()\n    dates = [today - timedelta(days=i) for i in range(30)]\n    df = pd.DataFrame({\n        'Date': dates,\n        'Weight (lbs)': np.random.randint(150, 180, size=30),\n        'Systolic BP': np.random.randint(110, 140, size=30),\n        'Diastolic BP': np.random.randint(70, 90, size=30),\n        'Heart Rate (bpm)': np.random.randint(60, 100, size=30),\n        'Steps': np.random.randint(5000, 12000, size=30),\n        'Sleep (hours)': np.random.uniform(6, 8, size=30).round(1),\n        'Mood': np.random.choice(['Happy', 'Neutral', 'Sad', 'Anxious'], size=30)\n    })\n    df['Date'] = pd.to_datetime(df['Date'])\n    return df\n\ndata = load_data()\n\n# Sidebar for Date Selection\nst.sidebar.header(\"Date Range\")\nmin_date = data['Date'].min()\nmax_date = data['Date'].max()\nstart_date, end_date = st.sidebar.date_input(\"Select Date Range\", \n                                               [min_date, max_date], \n                                               min_value=min_date, \n                                               max_value=max_date)\n\nfiltered_data = data[(data['Date'] >= pd.to_datetime(start_date)) & (data['Date'] <= pd.to_datetime(end_date))]\n\n# Main App\nst.title(\"Health Tracker Dashboard\")\n\n# KPIs\nst.header(\"Key Metrics\")\ncol1, col2, col3 = st.columns(3)\n\nwith col1:\n    avg_weight = filtered_data['Weight (lbs)'].mean().round(1)\n    st.metric(\"Avg. Weight (lbs)\", avg_weight)\n\nwith col2:\n    avg_steps = filtered_data['Steps'].mean().round(0)\n    st.metric(\"Avg. Steps\", f\"{avg_steps:,}\")\n\nwith col3:\n    avg_sleep = filtered_data['Sleep (hours)'].mean().round(1)\n    st.metric(\"Avg. Sleep (hours)\", avg_sleep)\n\n# Charts\nst.header(\"Trends Over Time\")\n\n# Weight Chart\nst.subheader(\"Weight Trend\")\nweight_chart = alt.Chart(filtered_data).mark_line().encode(\n    x=alt.X('Date:T', axis=alt.Axis(title='Date')),\n    y=alt.Y('Weight (lbs):Q', axis=alt.Axis(title='Weight (lbs)')),\n    tooltip=['Date:T', 'Weight (lbs):Q']\n).properties(\n    width=600,\n    height=300\n)\nst.altair_chart(weight_chart, use_container_width=True)\n\n# Blood Pressure Chart\nst.subheader(\"Blood Pressure\")\nbp_chart = alt.Chart(filtered_data.melt(id_vars=['Date'], value_vars=['Systolic BP', 'Diastolic BP'], var_name='Type', value_name='Value')).mark_line(point=True).encode(\n    x=alt.X('Date:T', axis=alt.Axis(title='Date')),\n    y=alt.Y('Value:Q', axis=alt.Axis(title='Blood Pressure (mmHg)')),\n    color='Type:N',\n    tooltip=['Date:T', 'Type:N', 'Value:Q']\n).properties(\n    width=600,\n    height=300\n)\n\nst.altair_chart(bp_chart, use_container_width=True)\n\n# Heart Rate Chart\nst.subheader(\"Heart Rate\")\nhr_chart = alt.Chart(filtered_data).mark_line(point=True).encode(\n    x=alt.X('Date:T', axis=alt.Axis(title='Date')),\n    y=alt.Y('Heart Rate (bpm):Q', axis=alt.Axis(title='Heart Rate (bpm)')),\n    tooltip=['Date:T', 'Heart Rate (bpm):Q']\n).properties(\n    width=600,\n    height=300\n)\nst.altair_chart(hr_chart, use_container_width=True)\n\n# Mood Distribution\nst.subheader(\"Mood Distribution\")\nmood_counts = filtered_data['Mood'].value_counts().reset_index()\nmood_counts.columns = ['Mood', 'Count']\n\nmood_chart = alt.Chart(mood_counts).mark_bar().encode(\n    x=alt.X('Mood:N', axis=alt.Axis(title='Mood')),\n    y=alt.Y('Count:Q', axis=alt.Axis(title='Count')),\n    tooltip=['Mood:N', 'Count:Q']\n).properties(\n    width=600,\n    height=300\n)\nst.altair_chart(mood_chart, use_container_width=True)\n\n# Raw Data Display\nst.header(\"Raw Data\")\nst.dataframe(filtered_data)"
  },
  {
    "text": "### Instruction:\nCreate a complex education monitor using Streamlit\n\n### Input:\nApp category: education, Complexity: complex, Type: monitor\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nimport datetime\n\n# --- Config ---\nst.set_page_config(page_title=\"Student Performance Monitor\", page_icon=\"\ud83d\udcc8\", layout=\"wide\")\n\n# --- Data ---\n@st.cache_data\ndef load_data():\n    num_students = 100\n    data = {\n        'Student ID': range(1, num_students + 1),\n        'Name': [f'Student {i}' for i in range(1, num_students + 1)],\n        'Math': np.random.randint(60, 100, num_students),\n        'Science': np.random.randint(50, 95, num_students),\n        'English': np.random.randint(70, 100, num_students),\n        'History': np.random.randint(65, 98, num_students),\n        'Attendance': np.random.rand(num_students),\n        'Participation': np.random.rand(num_students)\n    }\n    df = pd.DataFrame(data)\n    df['Overall'] = (df['Math'] + df['Science'] + df['English'] + df['History']) / 4\n    return df\n\ndf = load_data()\n\n# --- Sidebar ---\nst.sidebar.header(\"Filters\")\n\nsubject_filter = st.sidebar.multiselect(\n    \"Select Subjects\",\n    options=['Math', 'Science', 'English', 'History', 'Overall'],\n    default=['Overall']\n)\n\nattendance_threshold = st.sidebar.slider(\n    \"Minimum Attendance (%)\",\n    min_value=0, max_value=100, value=75\n) / 100\n\nparticipation_threshold = st.sidebar.slider(\n    \"Minimum Participation Score\",\n    min_value=0.0, max_value=1.0, value=0.5, step=0.05\n)\n\nfiltered_df = df[(df['Attendance'] >= attendance_threshold) & (df['Participation'] >= participation_threshold)]\n\n# --- Main App ---\nst.title(\"Student Performance Monitor\")\n\ntab1, tab2, tab3 = st.tabs([\"Overview\", \"Individual Performance\", \"Data\"])\n\nwith tab1:\n    st.header(\"Overall Performance\")\n    \n    col1, col2 = st.columns(2)\n\n    with col1:\n        st.subheader(\"Average Scores\")\n        avg_scores = filtered_df[subject_filter].mean()\n        st.bar_chart(avg_scores)\n\n    with col2:\n        st.subheader(\"Distribution of Overall Scores\")\n        alt_chart = alt.Chart(filtered_df).mark_bar().encode(\n            alt.X(\"Overall:Q\", bin=True),\n            y='count()',\n            tooltip=['Overall', 'count()']\n        ).properties(\n            title=\"Distribution of Overall Scores\"\n        )\n        st.altair_chart(alt_chart, use_container_width=True)\n\n\nwith tab2:\n    st.header(\"Individual Student Performance\")\n    student_id = st.selectbox(\"Select Student\", filtered_df['Student ID'])\n    student_data = filtered_df[filtered_df['Student ID'] == student_id].iloc[0]\n\n    st.write(f\"**Name:** {student_data['Name']}\")\n    st.write(f\"**Attendance:** {student_data['Attendance']:.2%}\")\n    st.write(f\"**Participation:** {student_data['Participation']:.2f}\")\n\n    subject_scores = {subject: student_data[subject] for subject in ['Math', 'Science', 'English', 'History']}\n    subject_df = pd.DataFrame.from_dict(subject_scores, orient='index', columns=['Score'])\n\n    st.subheader(\"Subject Scores\")\n    st.bar_chart(subject_df)\n\nwith tab3:\n    st.header(\"Raw Data\")\n    st.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a medium food dashboard using Streamlit\n\n### Input:\nApp category: food, Complexity: medium, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\n# App title\nst.title(\"Restaurant Sales Dashboard\")\n\n# Sample Data\ndata = {\n    'Date': pd.to_datetime(['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05', '2024-01-06', '2024-01-07']),\n    'Category': ['Appetizer', 'Main Course', 'Dessert', 'Appetizer', 'Main Course', 'Dessert', 'Drink'],\n    'Sales': [150, 320, 80, 170, 350, 90, 120],\n    'Orders': [25, 40, 15, 28, 45, 18, 30],\n    'Customers': [22, 38, 14, 25, 42, 16, 27]\n}\ndf = pd.DataFrame(data)\n\n# Sidebar filters\nst.sidebar.header(\"Filters\")\ncategory_filter = st.sidebar.multiselect(\n    \"Select Category\",\n    options=df['Category'].unique(),\n    default=df['Category'].unique()\n)\n\ndate_range = st.sidebar.date_input(\n    \"Select Date Range\",\n    min_value=df['Date'].min(),\n    max_value=df['Date'].max(),\n    value=(df['Date'].min(), df['Date'].max())\n)\n\nstart_date, end_date = date_range\n\n# Apply filters\nfiltered_df = df[df['Category'].isin(category_filter)]\nfiltered_df = filtered_df[(filtered_df['Date'] >= start_date) & (filtered_df['Date'] <= end_date)]\n\n\n# Metrics\ntotal_sales = filtered_df['Sales'].sum()\ntotal_orders = filtered_df['Orders'].sum()\ntotal_customers = filtered_df['Customers'].sum()\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Total Sales\", f\"${total_sales:,.2f}\")\ncol2.metric(\"Total Orders\", total_orders)\ncol3.metric(\"Total Customers\", total_customers)\n\n# Sales by Category Chart\nsales_by_category = filtered_df.groupby('Category')['Sales'].sum().reset_index()\nchart = alt.Chart(sales_by_category).mark_bar().encode(\n    x=alt.X('Category', sort='-y'),\n    y='Sales',\n    tooltip=['Category', 'Sales']\n).properties(\n    title='Sales by Category'\n)\nst.altair_chart(chart, use_container_width=True)\n\n# Time series chart\ntime_series = filtered_df.groupby('Date')['Sales'].sum().reset_index()\nline_chart = alt.Chart(time_series).mark_line().encode(\n    x='Date',\n    y='Sales',\n    tooltip=['Date', 'Sales']\n).properties(\n    title='Sales Over Time'\n)\n\nst.altair_chart(line_chart, use_container_width=True)\n\n# Display data table\nst.subheader(\"Filtered Data\")\nst.dataframe(filtered_df)"
  },
  {
    "text": "### Instruction:\nCreate a complex travel analyzer using Streamlit\n\n### Input:\nApp category: travel, Complexity: complex, Type: analyzer\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\n# Sample Data (Realistic Travel Data)\ndata = {\n    'Destination': ['Paris', 'Rome', 'Tokyo', 'New York', 'London', 'Sydney', 'Cairo', 'Rio de Janeiro', 'Barcelona', 'Amsterdam'],\n    'Country': ['France', 'Italy', 'Japan', 'USA', 'UK', 'Australia', 'Egypt', 'Brazil', 'Spain', 'Netherlands'],\n    'Continent': ['Europe', 'Europe', 'Asia', 'North America', 'Europe', 'Oceania', 'Africa', 'South America', 'Europe', 'Europe'],\n    'Average_Cost': [1500, 1200, 2000, 1800, 1600, 2200, 1000, 1300, 1400, 1700],\n    'Popularity': [9, 8, 7, 9, 8, 6, 5, 7, 8, 7],\n    'Climate': ['Temperate', 'Mediterranean', 'Temperate', 'Temperate', 'Temperate', 'Subtropical', 'Arid', 'Tropical', 'Mediterranean', 'Temperate'],\n    'Best_Time_to_Visit': ['Spring', 'Spring', 'Autumn', 'Spring', 'Spring', 'Autumn', 'Winter', 'Winter', 'Spring', 'Spring'],\n    'Attractions': ['Eiffel Tower, Louvre', 'Colosseum, Vatican City', 'Tokyo Skytree, Senso-ji', 'Statue of Liberty, Central Park', 'Buckingham Palace, British Museum', 'Sydney Opera House, Harbour Bridge', 'Pyramids of Giza, Sphinx', 'Christ the Redeemer, Copacabana', 'Sagrada Familia, Park G\u00fcell', 'Anne Frank House, Canals'],\n    'Activities': ['Sightseeing, Food Tours', 'Historical Sites, Food Tours', 'Shopping, Temples', 'Museums, Parks', 'Museums, Theatre', 'Beaches, Surfing', 'Historical Sites, Desert Tours', 'Beaches, Carnival', 'Architecture, Food Tours', 'Canal Tours, Museums']\n}\n\ndf = pd.DataFrame(data)\n\n# Streamlit App\nst.title('Travel Destination Analyzer')\n\n# Sidebar Filters\nst.sidebar.header('Filters')\n\ncontinent_filter = st.sidebar.multiselect(\n    'Select Continent(s)',\n    options=df['Continent'].unique(),\n    default=df['Continent'].unique()\n)\n\nclimate_filter = st.sidebar.multiselect(\n    'Select Climate(s)',\n    options=df['Climate'].unique(),\n    default=df['Climate'].unique()\n)\n\npopularity_threshold = st.sidebar.slider(\n    'Minimum Popularity',\n    min_value=1,\n    max_value=10,\n    value=5\n)\n\n# Apply Filters\nfiltered_df = df[df['Continent'].isin(continent_filter) & df['Climate'].isin(climate_filter) & (df['Popularity'] >= popularity_threshold)]\n\n# Display Filtered Data\nst.header('Filtered Destinations')\nst.dataframe(filtered_df)\n\n# Visualizations\nst.header('Visualizations')\n\n# Cost vs. Popularity Scatter Plot\nfig_scatter = px.scatter(filtered_df, x='Average_Cost', y='Popularity', color='Continent', hover_data=['Destination'],\n                     title='Cost vs. Popularity')\nst.plotly_chart(fig_scatter, use_container_width=True)\n\n# Bar Chart of Average Cost by Continent\navg_cost_by_continent = filtered_df.groupby('Continent')['Average_Cost'].mean().reset_index()\nfig_bar = px.bar(avg_cost_by_continent, x='Continent', y='Average_Cost', title='Average Cost by Continent')\nst.plotly_chart(fig_bar, use_container_width=True)\n\n# Destination Details\nst.header('Destination Details')\nselected_destination = st.selectbox('Select a Destination', filtered_df['Destination'].unique())\n\ndestination_details = filtered_df[filtered_df['Destination'] == selected_destination].iloc[0]\n\nst.write(f\"**Country:** {destination_details['Country']}\")\nst.write(f\"**Continent:** {destination_details['Continent']}\")\nst.write(f\"**Average Cost:** ${destination_details['Average_Cost']}\")\nst.write(f\"**Popularity:** {destination_details['Popularity']}\")\nst.write(f\"**Climate:** {destination_details['Climate']}\")\nst.write(f\"**Best Time to Visit:** {destination_details['Best_Time_to_Visit']}\")\nst.write(f\"**Attractions:** {destination_details['Attractions']}\")\nst.write(f\"**Activities:** {destination_details['Activities']}\")"
  },
  {
    "text": "### Instruction:\nCreate a complex travel calculator using Streamlit\n\n### Input:\nApp category: travel, Complexity: complex, Type: calculator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\n\n# Sample data for destinations\ndestinations_data = {\n    'Destination': ['Paris', 'Rome', 'Tokyo', 'New York', 'Sydney'],\n    'Avg Daily Cost ($)': [250, 200, 300, 350, 280],\n    'Hotel Cost ($)': [150, 120, 200, 250, 180],\n    'Food Cost ($)': [70, 60, 80, 90, 70],\n    'Activities Cost ($)': [30, 20, 20, 10, 30],\n    'Flight Cost ($)': [800, 700, 1200, 500, 900],\n    'Rating': [4.8, 4.7, 4.6, 4.5, 4.4]\n}\n\ndestinations_df = pd.DataFrame(destinations_data)\n\n# Streamlit App\nst.title(\"Travel Budget Calculator\")\n\n# Sidebar for user inputs\nst.sidebar.header(\"Trip Configuration\")\n\ndestination = st.sidebar.selectbox(\"Choose your destination:\", destinations_df['Destination'])\ntrip_duration = st.sidebar.number_input(\"Enter the duration of your trip (days):\", min_value=1, max_value=30, value=7)\nnum_people = st.sidebar.number_input(\"Number of people traveling:\", min_value=1, max_value=10, value=2)\naccommodation_type = st.sidebar.selectbox(\"Accommodation Type:\", [\"Hotel\", \"Airbnb\", \"Hostel\"])\n\n# Calculate Costs\ndestination_data = destinations_df[destinations_df['Destination'] == destination].iloc[0]\n\ndaily_cost = destination_data['Avg Daily Cost ($)']\nhotel_cost = destination_data['Hotel Cost ($)']\nfood_cost = destination_data['Food Cost ($)']\nactivities_cost = destination_data['Activities Cost ($)']\nflight_cost = destination_data['Flight Cost ($)']\n\nif accommodation_type == \"Airbnb\":\n    hotel_cost = hotel_cost * 0.8  # Assume Airbnb is 20% cheaper\nelif accommodation_type == \"Hostel\":\n    hotel_cost = hotel_cost * 0.5  # Assume Hostel is 50% cheaper\n\ntotal_hotel_cost = hotel_cost * trip_duration * num_people\ntotal_food_cost = food_cost * trip_duration * num_people\ntotal_activities_cost = activities_cost * trip_duration * num_people\ntotal_flight_cost = flight_cost * num_people\ntotal_cost = total_hotel_cost + total_food_cost + total_activities_cost + total_flight_cost\n\n# Display Results\nst.header(\"Trip Cost Breakdown\")\n\ncol1, col2 = st.columns(2)\n\nwith col1:\n    st.metric(\"Destination\", destination)\n    st.metric(\"Trip Duration (days)\", trip_duration)\n    st.metric(\"Number of People\", num_people)\n\nwith col2:\n    st.metric(\"Hotel Cost\", f\"${total_hotel_cost:,.2f}\")\n    st.metric(\"Food Cost\", f\"${total_food_cost:,.2f}\")\n    st.metric(\"Activities Cost\", f\"${total_activities_cost:,.2f}\")\n\nst.metric(\"Flight Cost\", f\"${total_flight_cost:,.2f}\")\nst.subheader(f\"Total Estimated Cost: ${total_cost:,.2f}\")\n\n# Cost breakdown chart\ncost_data = pd.DataFrame({\n    'Category': ['Hotel', 'Food', 'Activities', 'Flight'],\n    'Cost': [total_hotel_cost, total_food_cost, total_activities_cost, total_flight_cost]\n})\n\ncost_chart = alt.Chart(cost_data).mark_bar().encode(\n    x=alt.X('Category', sort=None),\n    y='Cost',\n    tooltip=['Category', 'Cost']\n).properties(\n    title='Cost Breakdown'\n)\n\nst.altair_chart(cost_chart, use_container_width=True)\n\n# Destination Ratings Chart\nst.header(\"Destination Ratings\")\n\nratings_chart = alt.Chart(destinations_df).mark_bar().encode(\n    x=alt.X('Destination', sort=None),\n    y='Rating',\n    tooltip=['Destination', 'Rating']\n).properties(\n    title='Destination Ratings'\n)\n\nst.altair_chart(ratings_chart, use_container_width=True)\n\n# Display destinations table\nst.header(\"Destination Details\")\nst.dataframe(destinations_df)"
  },
  {
    "text": "### Instruction:\nCreate a complex healthcare generator using Streamlit\n\n### Input:\nApp category: healthcare, Complexity: complex, Type: generator\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\nst.set_page_config(page_title=\"Healthcare Data Generator\", layout=\"wide\")\n\n@st.cache_data\ndef generate_sample_data(num_patients=100):\n    \"\"\"Generates realistic-looking sample healthcare data.\"\"\"\n    np.random.seed(42)\n    data = {\n        'PatientID': range(1, num_patients + 1),\n        'Age': np.random.randint(18, 85, num_patients),\n        'Gender': np.random.choice(['Male', 'Female'], num_patients),\n        'BMI': np.random.uniform(18, 40, num_patients).round(1),\n        'SystolicBP': np.random.randint(110, 180, num_patients),\n        'DiastolicBP': np.random.randint(70, 110, num_patients),\n        'HeartRate': np.random.randint(60, 100, num_patients),\n        'Cholesterol': np.random.uniform(150, 300, num_patients).round(0),\n        'HasDiabetes': np.random.choice([True, False], num_patients, p=[0.3, 0.7]),\n        'Smoker': np.random.choice([True, False], num_patients, p=[0.2, 0.8]),\n        'Medication': np.random.choice(['A', 'B', 'C', 'None'], num_patients),\n        'VisitDate': [datetime.today() - timedelta(days=np.random.randint(0, 365)) for _ in range(num_patients)]\n    }\n    return pd.DataFrame(data)\n\ndef main():\n    st.title(\"Healthcare Data Generator\")\n\n    num_patients = st.slider(\"Number of Patients:\", min_value=50, max_value=1000, value=200, step=50)\n    df = generate_sample_data(num_patients)\n\n    st.header(\"Generated Data\")\n    st.dataframe(df.head(10))\n\n    st.subheader(\"Data Summary\")\n    st.write(f\"Number of Patients: {len(df)}\")\n    st.write(f\"Data Columns: {', '.join(df.columns)}\")\n\n    st.header(\"Visualizations\")\n\n    # Age Distribution\n    st.subheader(\"Age Distribution\")\n    age_hist = alt.Chart(df).mark_bar().encode(\n        alt.X(\"Age:Q\", bin=True),\n        y='count()',\n        tooltip=['Age', 'count()']\n    ).properties(title=\"Distribution of Patient Ages\")\n    st.altair_chart(age_hist, use_container_width=True)\n\n    # BMI vs. Blood Pressure\n    st.subheader(\"BMI vs. Systolic Blood Pressure\")\n    scatter_bp_bmi = alt.Chart(df).mark_circle(size=60).encode(\n        x='BMI',\n        y='SystolicBP',\n        color='Gender',\n        tooltip=['PatientID', 'Age', 'BMI', 'SystolicBP', 'DiastolicBP']\n    ).properties(title=\"BMI vs. Systolic Blood Pressure\")\n    st.altair_chart(scatter_bp_bmi, use_container_width=True)\n\n    # Diabetes Prevalence\n    st.subheader(\"Diabetes Prevalence\")\n    diabetes_counts = df['HasDiabetes'].value_counts()\n    diabetes_data = pd.DataFrame({'Diabetes': diabetes_counts.index, 'Count': diabetes_counts.values})\n    diabetes_chart = alt.Chart(diabetes_data).mark_bar().encode(\n        x='Diabetes:N',\n        y='Count:Q',\n        tooltip=['Diabetes', 'Count']\n    ).properties(title=\"Prevalence of Diabetes\")\n    st.altair_chart(diabetes_chart, use_container_width=True)\n\n    # Medication Distribution\n    st.subheader(\"Medication Distribution\")\n    medication_counts = df['Medication'].value_counts().reset_index()\n    medication_counts.columns = ['Medication', 'Count']\n\n    medication_chart = alt.Chart(medication_counts).mark_bar().encode(\n        x='Medication:N',\n        y='Count:Q',\n        tooltip=['Medication', 'Count']\n    ).properties(title=\"Medication Distribution\")\n    st.altair_chart(medication_chart, use_container_width=True)\n\n\n    st.header(\"Download Data\")\n    csv = df.to_csv(index=False).encode('utf-8')\n    st.download_button(\n        label=\"Download data as CSV\",\n        data=csv,\n        file_name='healthcare_data.csv',\n        mime='text/csv',\n    )\n\nif __name__ == \"__main__\":\n    main()"
  },
  {
    "text": "### Instruction:\nCreate a complex fitness dashboard using Streamlit\n\n### Input:\nApp category: fitness, Complexity: complex, Type: dashboard\n\n### Response:\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\nimport altair as alt\nfrom datetime import datetime, timedelta\n\n# Sample Data\n@st.cache_data\ndef load_data():\n    today = datetime.today()\n    dates = [today - timedelta(days=i) for i in range(30)]\n    dates = [d.strftime('%Y-%m-%d') for d in dates]\n\n    data = {\n        'date': dates,\n        'steps': np.random.randint(5000, 15000, size=30),\n        'calories_burned': np.random.randint(1800, 2800, size=30),\n        'distance_miles': np.random.uniform(2.5, 7.0, size=30).round(2),\n        'sleep_hours': np.random.uniform(6.5, 8.5, size=30).round(1),\n        'weight_lbs': np.random.randint(150, 180, size=30) + np.random.normal(0, 2, size=30).round(1)\n    }\n    df = pd.DataFrame(data)\n    df['date'] = pd.to_datetime(df['date'])\n    return df\n\ndf = load_data()\n\n# Sidebar\nst.sidebar.header(\"Fitness Dashboard\")\nselected_date = st.sidebar.date_input(\"Select Date\", df['date'].max())\n\n# KPIs\nst.header(\"Key Performance Indicators\")\nselected_data = df[df['date'] == pd.to_datetime(selected_date)].iloc[0]\n\ncol1, col2, col3 = st.columns(3)\ncol1.metric(\"Steps\", selected_data['steps'])\ncol2.metric(\"Calories Burned\", selected_data['calories_burned'])\ncol3.metric(\"Distance (Miles)\", selected_data['distance_miles'])\n\ncol4, col5 = st.columns(2)\ncol4.metric(\"Sleep (Hours)\", selected_data['sleep_hours'])\ncol5.metric(\"Weight (Lbs)\", selected_data['weight_lbs'].round(1))\n\n# Charts\nst.header(\"Trends\")\n\n# Steps Chart\nst.subheader(\"Steps Over Time\")\nsteps_chart = alt.Chart(df).mark_line().encode(\n    x=alt.X('date:T', title='Date'),\n    y=alt.Y('steps:Q', title='Steps'),\n    tooltip=['date:T', 'steps:Q']\n).properties(\n    width=600,\n    height=300\n)\nst.altair_chart(steps_chart, use_container_width=True)\n\n# Calories Burned Chart\nst.subheader(\"Calories Burned Over Time\")\ncalories_chart = alt.Chart(df).mark_line(color='orange').encode(\n    x=alt.X('date:T', title='Date'),\n    y=alt.Y('calories_burned:Q', title='Calories Burned'),\n    tooltip=['date:T', 'calories_burned:Q']\n).properties(\n    width=600,\n    height=300\n)\nst.altair_chart(calories_chart, use_container_width=True)\n\n# Sleep vs Weight Scatter Plot\nst.subheader(\"Sleep vs Weight\")\nsleep_weight_chart = alt.Chart(df).mark_circle(size=60).encode(\n    x=alt.X('sleep_hours:Q', title='Sleep (Hours)'),\n    y=alt.Y('weight_lbs:Q', title='Weight (Lbs)'),\n    tooltip=['date:T', 'sleep_hours:Q', 'weight_lbs:Q']\n).properties(\n    width=600,\n    height=300\n)\nst.altair_chart(sleep_weight_chart, use_container_width=True)\n\n# Data Table\nst.header(\"Raw Data\")\nst.dataframe(df)"
  }
]